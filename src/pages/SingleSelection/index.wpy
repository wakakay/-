<template>
    <view class="select-article">
        <jn-header :title.sync="headerTitle"></jn-header>
        <view class="select-article__description">{{ bundle.title }}</view>
        <!-- <view class="order-article-body-orderitem__wrapper" style="height: {{ 176 * sourceList.length + 120 }}rpx;">
              <view @tap.stop="handleSelect" wx:for="{{sourceList}}" wx:for-index="$morder$index" wx:for-item="$morder$item" wx:key="$morder$index" data-id="{{ $morder$item.id }}" data-status="{{ cardStatus }}" data-feedback="{{ feedback }}" data-feedbackNeutral="{{ feedbackNeutral }}" data-card-i-d="{{ id }}" data-ability-skill="{{ $morder$item.abilitySkill }}" data-ability-group="{{ $morder$item.abilityGroup }}" data-message="{{ $morder$item.option }}" data-weight="{{ $morder$item.weight }}" data-mark="{{ score }}" class="order-article-body-orderitem" style="top: {{ 176 * mapper[$morder$item.id]['order'] }}rpx;">
                  <view class="order-article-body-orderitem-num" wx:if="{{ mapper[$morder$item.id]['isAnswer'] }}">{{mapper[$morder$item.id]['order'] + 1}}</view>
                  <view class="order-article-body-orderitem-num null" wx:else></view>
                  <view class="order-article-body-orderitem-text">{{ $morder$item.option }}</view>
              </view>
          </view> -->
        <!-- wrapper -->
        <view @tap.stop="handleSelect" class="select-article-item {{index===selectIndex?'selected':''}}"
              wx:for="{{bundle.select}}" wx:key="{{index}}" data-index="{{index}}" data-card-i-d="{{ bundle.id }}"
              data-ability-skill="{{ bundle.abilitySkill }}" data-ability-group="{{ bundle.abilityGroup }}"
              data-message="{{ item.option }}" data-weight="{{ item.weight }}" data-mark="{{ bundle.score }}">
            <view class="select-article-item-left {{index===selectIndex?'icon-selected':''}}">{{charTable[index]}}
            </view>
            <view class="select-article-item-content">{{item.option}}</view>
        </view>
    </view>
    <!-- article -->
    <view hidden="{{ !isModalShow }}" class="flex-end-column sorting-response-box-wrapper" @tap.stop="handleCloseModal">
        <view
            class="flex-space-between-column sorting-response-box {{ isFeedbackBoxShow? 'open': 'close' }} {{bundle.select[selectIndex].isanswer?'sorting-response-right':'sorting-response-wrong'}}"
            @tap.stop="handleCatchInvalidModalTouch">
            <view
                class="sorting-response-box__title-before {{bundle.select[selectIndex].isanswer?'':'sorting-response-box__title-before-wrong'}}"></view>
            <text class="sorting-response-box__title">{{ bundle.select[selectIndex].feedback.title }}</text>
            <view class="sorting-response-box__caption">{{ bundle.select[selectIndex].feedback.description }}</view>
            <view class="sorting-response-box__footer {{equipmentModel?'iphoneX':''}}" @tap.stop="handleTurnPage">
                {{currentPracticeOffset+1===practiceCount?'完成':'下一题'}}
            </view>
        </view>
        <!-- box -->
    </view>
    <!-- wrapper -->
</template>

<script>
    import wepy from 'wepy'
    import {
        getStore,
        connect
    } from "wepy-redux"
    import {card as cardApi} from '../../api'
    import {initializationDeligate, redirectToPractice, sleep} from '../../utils'
    import header from '../../components/common/header'

    export default class Sorting extends wepy.page {
        components = {
            'jn-header': header
        }

        data = {
            headerTitle: '',
            token: 'defaultToken',
            currentPracticeOffset: 0,
            bundle: {},
            practiceCount: 0,
            equipmentModel: false,
            courseID: 'defaultCourseID',
            senceID: 'defaultSenceID',
            requestFlag: 0,

            charTable: ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J"],
            selectIndex: -1,
            isFeedbackBoxShow: false, // 控制弹窗是否出现
            isModalShow: false, // 遮罩(底色)层是否出现

        }

        onLoad() {

        }

        onShow() {
            let self = this
            initializationDeligate({initializeFunc: self.initialize.bind(self)})
        }

        methods = {
            handleTurnPage() {
                this.triggerFeedback(false)
                    .then(() => {
                        this.selectIndex = -1
                        redirectToPractice(this.currentPracticeOffset + 1)
                        this.$apply()
                    })
            }, // end handleTurnPage
            handleSelect({
                             currentTarget: {
                                 dataset: {index, cardID, mark, message, weight, abilityGroup, abilitySkill}
                             }
                         }) {
                this.selectIndex = index
                this.triggerFeedback(true)
                null != mark && cardApi.sendCardScore({
                    token: this.token,
                    senceID: this.senceID,
                    cardID,
                    score: mark,
                    message,
                    weight,
                    abilityGroup,
                    abilitySkill
                })
                    .then(() => console.log('练习上报成功'))
                    .catch(error => console.log('练习上报失败', error))
                this.$apply()
            },
            handleCatchInvalidModalTouch() {
                return false
            },
            handleCloseModal() {
                this.triggerFeedback(false)
            }
        }

        initialize() {
            const {
                user: {token, equipmentModel},
                practices: {
                    requestFlag,
                    currentSectionOffset,
                    courseID,
                    senceID,
                    sections
                },
                sences:{
                    currentName
                }
            } = getStore().getState()
            this.token = token
            this.bundle = sections[currentSectionOffset]
            this.currentPracticeOffset = currentSectionOffset
            this.practiceCount = sections.length
            this.equipmentModel = equipmentModel.startsWith('iPhone X')
            this.courseID = courseID
            this.senceID = senceID
            this.requestFlag = requestFlag

            this.selectIndex = -1
            this.isModalShow = false
            this.isFeedbackBoxShow = false

            /*wepy.setNavigationBarTitle({
                title: '即学即练 ' + parseInt(this.currentPracticeOffset + 1) + '/' + this.practiceCount
            })*/
            this.headerTitle = '即学即练 ' + parseInt(this.currentPracticeOffset + 1) + '/' + this.practiceCount
            wepy.$instance.globalData.getLoadHuilder({pageTheme: currentName}) // ga统计
            this.$apply()
        }

        triggerFeedback(flag) {
            let mFlag = flag === true
            if (mFlag) {
                this.isModalShow = mFlag
                return sleep(0.2)
                    .then(() => {
                        this.isFeedbackBoxShow = mFlag
                        this.$apply()
                    })
            } // end if

            this.isFeedbackBoxShow = mFlag
            return sleep(0.2)
                .then(() => {
                    this.isModalShow = mFlag
                    this.$apply()
                })

        } // end triggerFeedback
    }
</script>

<style lang="less" scpoed>
  .select-article {
    width: 100%;
    height: 100%;
    overflow: scroll;
    box-sizing: border-box;
    background-color: #FFF;
    animation: fadeIn 1.2s;
    -webkit-animation: fadeIn 1.2s;
  }
   ::-webkit-scrollbar {
    width: 0;
    height: 0;
    background-color: transparent;
    color: transparent;
  }
  .select-article__description {
    font-family: PingFangSC-Semibold;
    font-size: 36rpx;
    color: #14292C;
    text-align: justify;
    line-height: 52rpx;
    margin: 60rpx 48rpx;
  }
  .select-article-item{
    margin: 0 30rpx 36rpx 30rpx;
    border-radius: 16rpx;
    padding: 28rpx 24rpx 28rpx 18rpx;
    display: flex;
    box-shadow: 0 2px 12px 0 rgba(0,0,0,0.14);
    background-color: #fff;
    height: 86rpx;
    align-items: center;
  }
  .selected{
    background-color: rgba(45,183,181, .2);
    box-shadow: none !important;
  }
  .select-article-item-left{
    width: 48rpx;
    height: 48rpx;
    border-radius: 50%;
    font-family: PingFangSC-Medium;
    font-size: 32rpx;
    color: #14292C;
    line-height: 32rpx;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: rgba(45,183,181, .2);
  }
  .icon-selected{
    color: #FFF;
    background-color: #2DB7B5;
  }
  .select-article-item-content{
    margin-left: 24rpx;
    font-family: PingFangSC-Regular;
    font-size: 32rpx;
    color: #14292C;
    text-align: justify;
    white-space: pre-line;
    word-break: break-all;
    flex:1;
  }
</style>
