<style lang="less" scoped>
    @import "../../assets/style/theme";
    .course-learning-box{
        width:100%;height:100%;position:relative;z-index:20;
        view{box-sizing:border-box;}
        .ui-progress-box{
            .ui-progress{width:216rpx;height:10rpx;background-color:rgba(241,242,245,.5);border-radius:6rpx;position:relative;left:0rpx;overflow:hidden;}
            .cell-current{height:100%;background-color:#A1A9AB;border-radius:6rpx;position:absolute;left:0;top:0;transition:width .5s ease-in-out;}
            .cell-number{width:58rpx;padding-left:16rpx;font-size:24rpx;color:#A1A9AB;}
            &.is-dark{
                .ui-progress .cell-current{background-color:rgba(241,242,245, 1);}
                .cell-number{color:@color-white;}
            }
        }
        .module-swiper-box{
            width:100%;height:100%;position:absolute;left:0;top:0;
            .ui-swiper-clear{width:100%;}
            .ui-swiper{
                width:100%;height:100%;
            }
        }
        .ui-button-box{
            width:100%;height:128rpx;padding:0 24rpx;position:fixed;left:0;bottom:0;
            &.is-iphonex{
                height:196rpx;
                .ui-button-list button .ui-tips{bottom:226rpx;}
            }
            .ui-button-list{
                width:224rpx;
                button{
                    width:100rpx;height:100rpx;margin-right:12rpx;background:@background-gray-F4;border-radius:@border-radius-20;position:relative;transition:all .25s;
                    text{display:block;width:100%;text-align:center;position:absolute;transition:all .25s;}
                    .cell-icon{font-size:48rpx;color:@color-blue;top:-26rpx;}
                    .cell-text{font-size:26rpx;color:@color-gray;bottom:-10rpx;}
                }
                .ui-tips{
                    width:390rpx;height:56rpx;background-color:@background-blue;font-size:28rpx;color:@color-white;text-align:center;line-height:56rpx;border-radius:@border-radius-20;position:fixed;left:62rpx;bottom:156rpx;display:none;transition:all .25s;
                    text{display:block;margin-left:-17rpx;font-size:34rpx;color:@color-blue;position:absolute;left:31%;top:34rpx;transform:rotatex(180deg);transition:all .25s;}
                }
            }
            .cell-button{
                width:100%;height:100rpx;background:@background-gray-F4;font-size:28rpx;color:@color-blue;border-radius:@border-radius-20;transition:all .25s;
                text{padding-left:10rpx;font-size:46rpx;}
                &.cell-unselect{color:@color-gray;}
            }
            .cell-hover{background:@background-gray-hover;}
            &.is-dark{
                .ui-button-list{
                    button{
                        background:@background-mask-normal-2;
                        text{color:@color-white;}
                    }
                }
                .cell-button{background:@background-mask-normal-2;color:@color-white;}
                .cell-hover{background:@background-mask-normal;}
                .ui-tips{
                    background-color:@background-white;color:@color-black;
                    text{color:@color-white;}
                }
            }
        }
    }
</style>

<template>
    <jn-loading wx:if="{{!isLoaded}}"></jn-loading>
    <view class="course-learning-box">
        <jn-header className="background-transparent" :delta.sync="routerDelta">
            <view slot="content" class="ui-progress-box main-center cross-center {{cardCurrentInfo[0].fullImageColorIsDark ? 'is-dark' : ''}}">
                <view class="ui-progress">
                    <view class="cell-current" style="width:{{((cardCurrent+1)/cardsList.length) * 100}}%"></view>
                </view>
                <view class="cell-number">{{cardCurrent+1}}/{{cardsList.length}}</view>
            </view>
        </jn-header>

        <view class="module-swiper-box"
              bindtouchstart="getSwipperStart"
              bindtouchend="getSwipperEnd">
            <swiper class="ui-swiper"
                    skip-hidden-item-layout
                    duration="300"
                    current="{{cardCurrent}}"
                    bindanimationfinish="getAnimationfinish">
                <repeat for="{{cardsOriginList}}" key="index" index="index" item="item">
                    <swiper-item style="background-color: {{item.fullImageBgColor}}"
                        catchtouchmove="getCatchTouchMove">
                        <view class="ui-swiper-clear" style="height: {{headerHeigth}}px"></view>
                        <view style="height: calc(100% - {{!isIpad ? headerHeigth+64 : 210}}px)">
                            <jn-full-image :cardItem.sync="item" :cardIndex.sync="index"
                                           wx:if="{{item.type==='fullimage'}}"></jn-full-image>
                            <jn-single-choice :cardItem.sync="item" :cardIndex.sync="index" :cardsList.sync="cardsList"
                                           wx:if="{{item.type==='textSelectionVer2'}}"></jn-single-choice>
                            <jn-sort :cardItem.sync="item" :cardIndex.sync="index" :cardsList.sync="cardsList"
                                           wx:if="{{item.type==='order'}}"></jn-sort>
                            <jn-poll :cardIndex.sync="index" :cardsList.sync="cardsList"
                                     wx:if="{{item.type==='multiplePoll' || item.type==='poll'}}"></jn-poll>
                            <jn-session :cardItem.sync="item" :cardIndex.sync="index" :cardsList.sync="cardsList"
                                     wx:if="{{item.type==='session'}}"></jn-session>
                            <jn-hot-spot :cardItem.sync="item" :cardIndex.sync="index" :cardsList.sync="cardsList"
                                        wx:if="{{item.type==='hotSpot'}}"></jn-hot-spot>
                            <jn-front :cardItem.sync="item" :cardIndex.sync="index" :cardsList.sync="cardsList"
                                     wx:if="{{item.type==='front'}}"></jn-front>
                        </view>
                    </swiper-item>
                </repeat>
            </swiper>
        </view>

        <view class="ui-button-box main-justify" :class="{'is-iphonex': isIphonex, 'is-dark': cardCurrentInfo[0].fullImageColorIsDark, 'is-hide': !cardCurrentInfo[0].buttonShow}">

            <view class="ui-button-list dir-left" wx:if="{{cardCurrentInfo[0].type=='fullimage' || cardCurrentInfo[0].type=='hotSpot'}}">
                <button @tap.stop="getShare">
                    <text class="icon-share cell-icon"></text>
                    <text class="cell-text">{{cardCurrentInfo[0].userShareCount || 0}}</text>
                </button>
                <button @tap.stop="getCollectionRecord">
                    <text class="icon-un-collection cell-icon"></text>
                    <text class="icon-collection cell-icon collectionAnimation" wx:if="{{cardCurrentInfo[0].userIsSelected}}"></text>
                    <text class="cell-text">{{cardCurrentInfo[0].cardCollectionCount || 0}}</text>
                </button>
                <view class="ui-tips {{isShowFirstCollection || isShowCollection ? 'is-show' : ''}}">点击按钮可将卡片标注为重点<text class="icon-arrow"></text></view>
            </view>

            <view class="cell-button main-center cross-center"
                  :class="{'cell-unselect': !cardCurrentInfo[0].allowToNext && cardCurrentInfo[0].isInteraction && !cardCurrentInfo[0].selectedId}"
                  hover-class="cell-hover"
                  hover-stay-time="100"
                  @tap.stop="getContinue">
                {{cardCurrentInfo[0].fullImageBottomtText}}<text class="icon-next" wx:if="{{cardCurrentInfo[0].allowToNext || !cardCurrentInfo[0].isInteraction || cardCurrentInfo[0].selectedId}}"></text>
            </view>
        </view>

        <jn-share-card></jn-share-card>
    </view>

    <view class="module-result-box dir-bottom"
          :class="{'is-iphonex': isIphonex, 'active': isAnswerOver, 'is-success': cardCurrentInfo[0].answerStatus===1, 'is-error': cardCurrentInfo[0].answerStatus===2, 'is-default': cardCurrentInfo[0].answerStatus===3}">
        <view class="ui-mask" hover-stay-time="100" @tap.stop="getCloseMask"></view>
        <view class="ui-result">
            <view class="ui-title">{{cardCurrentInfo[0].answerTitle}}</view>
            <view class="ui-thumb" wx:if="{{cardCurrentInfo[0].answerIcon}}">
                <image mode="aspectFit" src="{{cardCurrentInfo[0].answerIcon}}"
                       style="width:{{cardCurrentInfo[0].width}}px;height:{{cardCurrentInfo[0].height}}px;"></image>
            </view>
            <view class="ui-details">
                {{cardCurrentInfo[0].answerDescription}}
            </view>
            <view class="ui-button main-center cross-center" hover-stay-time="100" @tap.stop="getNextCard" wx:if="{{cardCurrentInfo[0].type != 'hotSpot'}}">
                继续学习<text class="icon-next"></text>
            </view>
        </view>
    </view>

    <view class="module-toast-box main-center cross-center" :class="{'is-opacity-show': isShowTotast}">
        <view class="ui-content">
            <view class="cell-icon"><text class="{{banSwitchToast[cardCurrentInfo[0].type].icon}}"></text></view>
            <view class="cell-title">{{banSwitchToast[cardCurrentInfo[0].type].title}}</view>
        </view>
    </view>
</template>

<script>
    import wepy from 'wepy'
    import {getStore, connect} from 'wepy-redux'
    import {fetchCardsWithPreview} from '../../redux/models/cards'
    import {initializationDeligate, deepCopy, parsePercentageForPoll} from '../../utils'
    import {card as cardApi, registered as fetch, share as shareApi, push as pushApi} from '../../api'
    import header from '../../components/common/header'
    import Loading from '../../components/common/loading'
    import shareCard from '../../components/shareImages/share-card'
    import fullImage from '../../components/cards-type/full-image'
    import singleChoice from '../../components/cards-type/single-choice'
    import sort from '../../components/cards-type/sort'
    import poll from '../../components/cards-type/poll'
    import session from '../../components/cards-type/session'
    import hotSpot from '../../components/cards-type/hot-spot'
    import front from '../../components/cards-type/front'
    import _ from 'underscore'

    const store = getStore()
    @connect({
        systemInfo(state) {
            return state.user
        },
        requestFlag(state) {
            return state.cards.requestFlag
        },
        currentCourseName(state) {
            return state.courses.currentName
        },
        entrance(state) {//全局场景值
            return state.entrance
        }
    })
    export default class courseLearning extends wepy.page {
        components = {
            'jn-header': header,
            'jn-loading': Loading,
            'jn-share-card': shareCard,
            'jn-full-image': fullImage,
            'jn-single-choice': singleChoice,
            'jn-sort': sort,
            'jn-poll': poll,
            'jn-session': session,
            'jn-hot-spot': hotSpot,
            'jn-front': front
        }

        data = {
            headerHeigth: 68,
            isIphonex: /iphone10|iphone x/i.test(wx.getSystemInfoSync().model),
            isIpad: /iPad|ipad/i.test(wx.getSystemInfoSync().model),
            isLoaded: false,
            isSubmit: false, // 是否提交了收藏或生成分享图
            isShowFirstCollection: false, // 第一次是否显示收藏提示
            isShowCollection: false, // 停留在全图卡、热点卡超过6s显示收藏提示
            timer: null,
            senceID: null,
            courseID: null,
            teamID: 'defaultTeamID',
            senceName: '',
            senceThumb: '',
            cardCurrentInfo: [],
            cardCurrent: 0,
            cardsList: [],
            cardsOriginList: [],
            systemInfo: {
                screenWidth: 0,
                screenHeight: 0
            },
            startTouches: {},
            isAnimationfinish: true,
            isAnswerOver: false,
            interactionType: ['textSelectionVer2', 'order', 'poll', 'association'],
            feedbackResult: ['textSelectionVer2', 'order'],
            anmiationCard: ['session'], // 动画卡，切换到这种卡的初始化运动的卡片
            routerDelta: 1,
            isShowTotast: false,
            banSwitchToast: {
                'textSelectionVer2': {icon: 'icon-toast', title: '选择正确的选项'},
                'poll': {icon: 'icon-toast', title: '请先投票'},
                'order': {icon: 'icon-toast', title: '请先排序'},
                'session': {icon: 'icon-toast', title: '请先回复'},
                'front': {icon: 'icon-toast', title: '点击按钮继续学习'}
            },
            skipRoutes: [
                'pages/course-module/course-learning',
                'pages/course-module/course-exercises',
                'pages/course-module/course-complete',
                'pages/course-module/lesson',
                'pages/course-module/lesson-for-android',
                'pages/Sorting/index',
                'pages/SingleSelection/index']
        }

        onLoad(parameter) {
            let self = this
            self.senceID = parameter.senceID
            self.courseID = parameter.courseID
            self.teamID = parameter.teamID

            wx.getStorage({
                key: 'collectionStatus',
                success(respone) {
                    if (!respone.data) {
                        self.isShowFirstCollection = true
                        self.$apply()
                        wx.setStorageSync("collectionStatus", true)
                    }
                }
            })

            self.__originalRouter()

            let postData = {
                courseID: self.courseID,
                senceID: self.senceID,
                teamID: parameter.teamID || 'defaultTeamID',
                resumeLastRead: 'NO',
                source: parameter.source || 'continueList'
            }

            initializationDeligate({
                initializeFunc: self.initialize.bind(self, postData)
            }).catch(error => {
                'login:no' === error && new UnAuthenticationError()
            })
        }

        onShow() {
            let self = this
            // 通知卡片组件，重置初始化数据
            self.$broadcast('broadcast-reset-status')
        }

        /**
         * 初始化接口数据
         * @returns {boolean}
         */
        initialize({courseID, senceID, teamID, resumeLastRead, source}) {
            let self = this
            let postData = {token: self.systemInfo.token, senceID, courseID, teamID, source: source}
            self.isLoaded = false
            fetch.courseLearning(postData).then((respone) => {
                let cards = self.__dataRegroup(respone)

                self.isLoaded = true
                self.senceName = respone.name
                self.senceThumb = respone.imageUrl
                self.cardsOriginList = deepCopy(cards) // 给swiper使用的数据
                self.cardsList = cards

                // 恢复上次学习的进度
                let index = _.findIndex(self.cardsList, {id: respone.lastCardID}) || 0
                index = -1 !== index ? index : 0
                self.cardCurrentInfo.push(self.cardsList[index])
                self.cardCurrent = index
                if ('hotSpot' === self.cardCurrentInfo[0].type || 'fullimage' === self.cardCurrentInfo[0].type) {
                    self.__interval()
                }
                self.__hasInitAnimation()
                self.$apply()
                wepy.$instance.globalData.getLoadHuilder({pageTheme: self.senceName}) // ga统计
                // 进入微课事件上报埋点
                wx.reportAnalytics('opensence', {
                    role: self.systemInfo.role,
                    nickname: self.systemInfo.name,
                    coursename: self.currentCourseName,
                    sencename: self.senceName,
                    channel: self.entrance.mappers[self.entrance.scenceID]
                })
            }).catch(error => {
                self.isLoaded = true
            })
        }
        /**
         * 重组接口返回的数据信息
         * @returns {respone}
         */
        __dataRegroup(respone) {
            let self = this
            let length = respone.list.length - 1
            _.each(respone.list, (data, index) => {
                data.buttonShow = true
                if (!data.fullImageBottomtText) {
                    switch (data.type) {
                        case 'textSelectionVer2':
                            data.fullImageBottomtText = data.allowToNext ? '继续学习' : '请选择答案'
                            // 由于但选择题，可能是复制出来的，导致选项id是相同的
                            _.each(data.select, (item) => {
                                item.sId = _.clone(item.id)
                                item.id = data.id + item.id
                            })
                            break
                        case 'session':
                            data.fullImageBottomtText = data.allowToNext ? '继续学习' : '请先回复'
                            data.buttonShow = false
                            // 由于但选择题，可能是复制出来的，导致选项id是相同的
                            _.each(data.select, (item) => {
                                item.sId = _.clone(item.id)
                                item.id = data.id + item.id
                            })
                            break
                        case 'order':
                            data.fullImageBottomtText = data.allowToNext ? '继续学习' : '请选择先后顺序'
                            if (data.allowToNext) {
                                data.selectedInfo = {}
                                let trueSequence = data.trueSequence.split(',')
                                _.each(trueSequence, (item, index) => {
                                    let params = _.find(data.select, {id: item})
                                    data.selectedInfo[item] = {
                                        index: index,
                                        isSelected: true,
                                        id: item,
                                        weight: params.weight
                                    }
                                })
                            }
                            break
                        case 'hotSpot':
                            data.fullImageBottomtText = '继续学习'
                            let prop = (self.systemInfo.windowWidth * 0.86) / data.ImageWidth
                            data.imgWidth = Math.ceil(prop * data.ImageWidth)
                            data.imgHeight = Math.ceil(prop * data.ImageHeight)
                            data.hotSpotPosition = []
                            _.each(data.hotSpotFlag, (item) => {
                                let obj = {}
                                let remainder = item % 7
                                let divisor = item / 7
                                item = parseInt(item)
                                obj.location = item
                                obj.top =  0 !== remainder ? Math.floor(divisor) * 10 : (divisor - 1) * 10
                                obj.left = 0 !== remainder ? (remainder - 1) * 14.3 : 6 * 14.3

                                data.hotSpotPosition.push(obj)
                            })
                            break
                        case 'multiplePoll':
                        case 'poll':
                            data.fullImageBottomtText = data.isDone ? '继续学习' : '请投票'
                            data.allowToNext = data.isDone // 没做的不能继续学习出
                            if (data.isDone) {
                                let ballotTotal =_.reduce(data.select, (memo, data) => {return memo + data.ballot}, 0) // 统计全部投票人数
                                _.each(data.select, (data) => {
                                    data.prop = Math.floor(data.ballot / ballotTotal * 1000) / 10
                                })
                            }
                            break
                        /*case 'association':
                            data.allowToNext = false
                            data.fullImageBottomtText = data.allowToNext ? '继续学习' : '请拖动卡片到对应的卡槽中'

                            let thumnbList = _.union(data.matching[0].imgList, data.matching[1].imgList) // 合并分类1，2的数据
                            thumnbList = _.shuffle(thumnbList) // 随机打乱排序
                            data.thumnbList = thumnbList
                            break*/
                        case 'front':
                            data.fullImageBottomtText = '开始练习'
                            break
                        default:
                            data.fullImageBottomtText = index !== length && (data.fullImageBottomtText || '继续学习')
                    }
                }

                if (index === length) {
                    data.lastCard = true
                    if ('front' === respone.list[length].type && '继续学习' == respone.list[length - 1].fullImageBottomtText) {
                        respone.list[length - 1].fullImageBottomtText = '即学即练'
                    } else {
                        data.fullImageBottomtText = data.fullImageBottomtText || '点击完成微课'
                    }
                }

                // 是否是交互卡
                if (-1 !== _.indexOf(self.interactionType, data.type)) {
                    data.isInteraction = true
                    data.fullImageColorIsDark = false // 不开启深色
                }
            })

            return respone.list
        }
        /**
         * 计算返回到微课入口页面
         * @private
         */
        __originalRouter() {
            let self = this
            let routers = getCurrentPages()
            let lenght = routers.length - 2
            self.routerDelta = 1

            lenght > 1 && _.find(routers, (data, index) => {
                let item = routers[lenght - index]
                if (-1 === _.indexOf(self.skipRoutes, item.route)) {
                    return data
                } else {
                    self.routerDelta++
                }
            })
        }
        /**
         * 初始化卡片的运动效果
         */
        __hasInitAnimation() {
            let self = this
            if (-1 !== _.indexOf(self.anmiationCard, self.cardsList[self.cardCurrent].type)) {
                self.cardsList[self.cardCurrent].isStartAnimation = true
                self.$apply()
            }
        }
        /**
         * 触摸滑动结束后更新数据
         * @returns {type} 有则发送请求记录学习到第几张卡片
         */
        __touchEnd(type) {
            let self = this
            self.cardCurrentInfo.splice(0, 1, self.cardsList[self.cardCurrent])
            self.startTouches = {}
            self.isAnimationFinish = false
            type && self.__recordProgress()
            self.$apply()
        }
        /**
         * 发送请求记录学习到第几张卡片
         * @returns {type} 有则发送
         */
        __recordProgress() {
            let self = this
            let current = self.cardCurrentInfo[0]
            let postData = {
                token: self.systemInfo.token,
                senceID: self.senceID,
                cardID: current.id,
                requestFlag: self.requestFlag,
                teamID: self.teamID
            }
            cardApi.markCard(postData).then(() => {

            }).catch(error => {

            })
        }
        /**
         * 提交做题答案结果
         * @returns {event}
         */
        __sumbitResult(event) {
            let self = this
            let current = self.cardCurrentInfo[0]
            // 如果没有选中的信息
            if (!current.selectedItem) {
                self.isShowTotast = true
                setTimeout(()=>{
                    self.isShowTotast = false
                    self.$apply()
                }, 1500)
                return
            }

            let item = _.find(current.select, {id: current.selectedItem.id})
            self.isAnswerOver = -1 !== _.indexOf(self.feedbackResult, current.type) ? true : false // 做题环节结束
            //self.allowToNext = true // 允许进入下一个卡片

            current.allowToNext = true
            current.fullImageBottomtText = '继续学习'
            self.cardsList[self.cardCurrent].allowToNext = true
            self.cardsList[self.cardCurrent].fullImageBottomtText = '继续学习'

            self.__noticeBroadcast(current)
            self.__sumbitScore()
            self.__sumbitFeedBack()
        }
        /**
         * 通知对应的子组件
         * @returns {event}
         */
        __noticeBroadcast(data) {
            let self = this
            let component = ''
            switch (data.type) {
                case 'textSelectionVer2':
                    component = 'broadcast-single-choive'
                    break
                case 'session':
                    component = 'broadcast-session'
                    break
                case 'order':
                    component = 'broadcast-sort'
                    break
                case 'multiplePoll':
                case 'poll':
                    data.isDone = true
                    component = 'broadcast-poll'
                    break
            }
            component && self.$broadcast(component, data)
        }
        /**
         * 提交做题答案
         * @returns {event}
         */
        __sumbitScore() {
            let self = this
            let current = self.cardCurrentInfo[0]
            if (-1 !== _.indexOf(self.feedbackResult, current.type)) {
                let postData = {
                    token: self.systemInfo.token,
                    senceID: self.senceID,
                    cardID: current.id,
                    score: current.score,
                    message: current.selectedItem.option, // 选中选项的name
                    weight: current.selectedItem.weight, // 选中选项的权重
                    abilityGroup: current.abilityGroup,
                    abilitySkill: current.abilitySkill,
                    json: current.json // 选中选项的id或顺序
                }
                cardApi.sendCardScore(postData).then(() => {
                    console.log('练习上报成功')
                }).catch(error => {
                    console.log('练习上报失败', error)
                })
                return
            }

            // 投票
            pushApi.sendPollSelection({
                token: self.systemInfo.token,
                cardID: current.id,
                optionList: current.selectedItem.id
            })
        }
        /**
         * 提交反馈信息
         * @returns {event}
         */
        __sumbitFeedBack() {
            let self = this
            let current = self.cardCurrentInfo[0]
            let postData = {
                token: self.systemInfo.token,
                senceID: self.senceID,
                courseID: self.courseID,
                cardID: current.id,
                type: current.type
            }
            pushApi.sendFeedBack(postData).catch(error => {
                console.log('fail to sendFeedBack to backend', error)
            })
        }
        /**
         * 延时定时器
         * @returns {event}
         */
        __interval() {
            let self = this
            clearTimeout(self.timer)
            self.isShowCollection = false
            self.$apply()

            self.timer = setTimeout(() => {
                self.isShowCollection = true
                self.$apply()
            }, 6000)
        }

        methods = {
            /**
             * 禁止滑块跟随手势移动
             * @returns {boolean}
             */
            getCatchTouchMove() {
                return false
            },
            /**
             * 开始触摸
             * @param event
             */
            getSwipperStart(event) {
                let self = this
                self.startTouches = event.changedTouches[0]
            },
            /**
             * 结束触摸
             * @param event
             */
            getSwipperEnd(event) {
                let self = this
                /*if ('association' === self.cardCurrentInfo[0].type) {
                    return
                }*/
                self.endTouches = event.changedTouches[0]
                let space = self.cardCurrentInfo[0].allowToNext ? 10 : 80
                let distanceX = self.startTouches.pageX - self.endTouches.pageX
                let distanceY = Math.abs(self.startTouches.pageY - self.endTouches.pageY)

                // 切换动画未完成，不允许继续学习
                if (!self.isAnimationFinish || _.isEmpty(self.startTouches)) { // || distanceY > 40
                    return false
                }

                let isLastCard = self.cardCurrent < self.cardsList.length - 1
                let nextCard = self.cardsList[self.cardCurrent] // 判断下一张卡片是否需要完成交互才能进行l
                if (distanceX > space && isLastCard) { // 向右
                    if (!nextCard.allowToNext) {
                        self.isShowTotast = true
                        setTimeout(()=>{
                            self.isShowTotast = false
                            self.$apply()
                        }, 1500)
                        self.__touchEnd()
                        return
                    }

                    self.cardCurrent += 1
                    self.__interval()
                    self.__touchEnd(1)
                } else if (distanceX < -space && self.cardCurrent) { // 向左
                    self.cardCurrent -= 1
                    self.__interval()
                    self.__touchEnd(1)
                }
            },
            /**
             * 动画完成
             */
            getAnimationfinish(event) {
                let self = this
                self.isAnimationFinish = true
                self.$apply()
            },
            /**
             * 继续学习下一个卡片
             */
            getContinue() {
                let self = this
                let current = self.cardCurrentInfo[0]
                // 最后一张卡，跳转到完成页面
                if (current.lastCard) {
                    let url = 'front' !== current.type
                        ? `/pages/course-module/course-complete?courseID=${self.courseID}&senceID=${self.senceID}&teamID=${self.teamID}`
                        : `/pages/course-module/course-exercises?courseID=${self.courseID}&senceID=${self.senceID}&cardID=${self.cardCurrentInfo[0].id}&teamID=${self.teamID}`
                    wx.navigateTo({url: url})
                    return false
                }

                // 是否交互卡片
                if (!current.allowToNext) {
                    self.__sumbitResult()
                } else {
                    self.cardCurrent += 1
                    self.cardCurrentInfo.splice(0, 1, self.cardsList[self.cardCurrent])
                    self.__interval()
                    self.__hasInitAnimation()
                    self.__recordProgress()
                }
            },
            /**
             * 关闭遮罩层
             */
            getCloseMask() {
                let self = this
                self.isAnswerOver = false
                self.cardCurrentInfo[0].allowToNext = true
                self.cardCurrentInfo[0].fullImageBottomtText = '继续学习'
                self.cardsList[self.cardCurrent].allowToNext = true
                self.cardsList[self.cardCurrent].fullImageBottomtText = '继续学习'
                self.$apply()
            },
            /**
             * 提交答案之后的按钮，前往下一张卡片
             */
            getNextCard() {
                let self = this
                self.cardsList[self.cardCurrent].allowToNext = true
                self.isAnswerOver = false
                self.cardCurrent += 1

                self.cardCurrentInfo.splice(0, 1, self.cardsList[self.cardCurrent])
                self.__interval()
                self.__hasInitAnimation()
            },
            /**
             * 全图卡热点卡生成分享图片
             * @returns {boolean}
             */
            getShare() {
                let self = this
                if (self.isSubmit) {
                    return
                }

                self.isSubmit = true
                let postData = {
                    token: self.systemInfo.token,
                    courseID: self.courseID,
                    senceID: self.senceID
                }

                shareApi.getCourseQrCode(postData).then(({imageUrl: shareImage}) => {
                    self.isSubmit = false
                    let shareImages = {
                        senceThumb: self.senceThumb,
                        cardImage: self.cardCurrentInfo[0].bigimage,
                        shareImage
                    }
                    // 通知组件，生成图片预览
                    self.$broadcast('card-share-images-list', shareImages)
                }).catch(error => {
                    self.isSubmit = false
                })
            },
            /**
             * 收藏重点卡
             * @param
             */
            getCollectionRecord() {
                let self = this
                if (self.isSubmit) {
                    return
                }

                self.isSubmit = true
                let item = self.cardCurrentInfo[0]
                let postData = {
                    token: self.systemInfo.token,
                    courseID: self.courseID,
                    senceID: self.senceID,
                    cardID: item.id,
                    teamID: self.teamID,
                    flag: item.userIsSelected ? 0 : 1
                }

                self.isShowCollection = false
                fetch.collectionRecord(postData).then((respone) => {
                    if (respone.cardCollectionCount) {
                        item.userIsSelected = 1
                        item.cardCollectionCount += 1
                        wx.showToast({
                            title: '收藏重点卡成功',
                            icon: 'success'
                        })
                    } else {
                        item.userIsSelected = 0
                        item.cardCollectionCount -= 1
                        wx.showToast({
                            title: '取消重点卡成功',
                            icon: 'success'
                        })
                    }
                    self.isSubmit = false
                    self.$apply()
                }).catch(error => {
                    self.isSubmit = false
                })
            }
        }

        events = {
            'header-info': (data) => {
                let self = this
                self.headerHeigth = data.headerHeigth
                self.$apply()
            },
            /**
             * 交互卡，选择，排序卡
             * @param data
             */
            'on-interaction': (data) => {
                let self = this
                let item = _.find(self.cardsList, {id: data.id})
                _.extend(item, data)

                if ('session' === item.type || 'hotSpot' === item.type || 'association' === item.type) {
                    self.isAnswerOver = true
                    item.allowToNext = true
                }

                self.cardCurrentInfo.splice(0, 1, item)
                self.$apply()
            },
            /**
             * 分享卡片统计
             * @param data
             */
            'on-share-card': (data) => {
                let self = this
                let postData = {
                    token: self.systemInfo.token,
                    courseID: self.courseID,
                    senceID: self.senceID,
                    cardID: self.cardCurrentInfo[0].id
                }
                fetch.courseShareCount(postData).then((respone) => {
                    self.cardCurrentInfo[0].userShareCount = respone.userShareCount
                    self.$apply()
                }).catch(error => {

                })
            }
        }
    }
</script>
