<style lang="less">
    @import "../../assets/style/theme";
    .ui-scroll{height: 100%;}
    .ui-pre-practice{
        display: flex;flex-direction: column;align-items: center;width: 100%;height: 100%;position: absolute;top:0;left: 0;
        .ui-box{
            width: 100%;position: fixed;bottom: 0rpx;display: flex;flex-direction: column;align-items: center;background-image:linear-gradient(180deg,rgba(255,255,255,0),rgba(255,255,255,1));
            .cell-btn{
                margin: 0 72rpx 56rpx;width: 686rpx;height: 100rpx;border-radius: @border-radius-20;background: @background-blue;font-family: PingFangSC-Semibold;font-size: 34rpx;color:@color-white;display: flex;flex-direction: column;align-items: center;line-height: 100rpx;
                &::after{border: 0 !important;}
            }
            .cell-hover{background: @background-blue-hover}
        }
        .ui-img{
            width: 100%;overflow:scroll;height: 100%;
            image{width: 100%;}
        }
    }
</style>

<template>
    <mloading wx:if="{{ !isLoaded }}"/>
    <scroll-view class="ui-scroll">
        <jn-header className="background-transparent" buttonAfter></jn-header>
        <view wx:if="{{ isLoaded }}" class="ui-pre-practice">
            <view class="ui-img">
                <image mode="widthFix" src="{{imageBottomURL}}" />
            </view>
            <view class="ui-box">
                <button hover-class="cell-hover" class="cell-btn"
                        open-type="{{!userName ? 'getUserInfo' : ''}}"
                        bindgetuserinfo="handleBeginPractice" @tap.stop="handleBeginPractice">开始测试
                </button>
            </view>
        </view>
    </scroll-view>
</template>

<script>
    import wepy from 'wepy'
    import {fetch, report as reportApi} from '../../api'
    import {getStore, connect} from 'wepy-redux'
    import {login} from "../../redux/models/user"
    import Loading from '../../components/common/loading'
    import header from '../../components/common/header'
    import {initializationDeligate} from "../../utils"
    import {getLoginInfo} from '../../redux/models/user'

    const store = getStore()
    @connect({
        userName(state) {
            return state.user.nickName
        },
        entrance(state) {
            return state.entrance
        },
        token(state) {
            return state.user.token
        },
        role(state) {
            return state.user.role
        }
    })
    export default class appraisalStart extends wepy.page {
        config = {
            disableScroll: true
        }

        components = {
            'mloading': Loading,
            'jn-header': header
        }

        data = {
            senceID: 'defaultSenceID',
            description: '',
            name: 'defaultName',
            examID: null,
            wxPushType: '',
            isFirst: false,
            imageBottomURL: '',
            imageHeaderURL: '',
            imagePracticeURL: '',
            imageResultURL: '',
            isLoaded: false,
            headerHeigth:0
        }

        onLoad({courseID, senceID, teamID = 'defaultTeamID', examID, wxPushType}) {
            this.courseID = courseID
            this.senceID = senceID
            this.examID = examID
            this.wxPushType = wxPushType
        }

        onShow() {
            let self = this
            initializationDeligate({initializeFunc: self.initialize.bind(self)})
        }

        initialize() {
            let self = this
            let postData = {
                token: self.token,
                examID: self.examID
            }
            if (self.wxPushType) {
                postData.wxPushType = self.wxPushType
            }
            return fetch.getExamFront(postData).then(({description, examID, subject, imageBottomURL, imageHeaderURL, imagePracticeURL, imageResultURL, subjectHeading}) => {
                self.isLoaded = true
                self.description = description
                self.imageBottomURL = imageBottomURL
                self.imageHeaderURL = imageHeaderURL
                self.imagePracticeURL = imagePracticeURL
                self.imageResultURL = imageResultURL
                self.subjectHeading = subjectHeading
                self.name = subject
                self.$apply()

                wepy.$instance.globalData.getLoadHuilder({pageTheme: self.subjectHeading}) // ga统计
                wx.reportAnalytics('pre_test_cover', {
                    username: self.userName,
                    examid: self.examID,
                    channel: self.entrance.mappers[self.entrance.scenceID],
                    role: self.role
                })
            })
        }
        /**
         * 服务通知数据上报
         */
        __report() {
            let self = this
            if (self.isFirst) {
                return
            }
            self.isFirst = true
            let postData = {
                token: self.token,
                body: {
                    json: {
                        pageType: "测评首页",
                        EventType: "服务通知点击",
                        ComponentName: "测评服务通知点击",
                        senceID: self.examID,
                        CpnPresentName: "测评服务通知点击"
                    }
                }
            }

            reportApi.doUserBehaviourLog(postData)
        }

        methods = {
            handleBeginPractice(event) {
                let self = this
                let {detail: {errMsg, userInfo, rawData}} = event
                // 服务通知进来的才上报
                if (self.wxPushType) {
                    self.__report()
                }

                store.dispatch(getLoginInfo({userInfo, errMsg})).then(repsone => {
                    // 微信埋点事件
                    wx.reportAnalytics('examstart_click', {
                        username: self.userName,
                        channel: self.entrance.mappers[self.entrance.scenceID],
                        examid: self.examID,
                    });

                    let params = {
                        examID: self.examID,
                        bgUrl: self.imageBottomURL,
                        imagePracticeURL: self.imagePracticeURL,
                        subjectHeading: self.subjectHeading
                    }
                    if (self.imageResultURL) {
                        params.imageResultURL = self.imageResultURL
                    }
                    wepy.$instance.globalData.getHuilder('测一测/开始测试','click', '开始测试')
                    self.$redirect('/pages/activity-module/appraisal-questions', params)
                }).catch(error => {

                })
            }
        }

        events = {
            'header-info': (data) => {
                let self = this
                self.headerHeigth = data.headerHeigth
                self.$apply()
            }
        }
    }
</script>
