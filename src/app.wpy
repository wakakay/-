<style lang="css" src="./assets/iconfont/iconfont.css"></style>
<style lang="css" src="assets/style/layout.css"></style>
<style lang="css" src="./assets/style/animation.css"></style>
<style lang="less">
    @import "./assets/style/common";
    .container {
        height: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-between;
        box-sizing: border-box;
    }
</style>

<script>
    import wepy from 'wepy'
    import {store} from './redux/store'
    import {setStore, getStore} from 'wepy-redux'
    import {fetch, auth as authApi} from './api'
    import envConfig from './api/config'
    import {ROUTERS, SCENE} from './utils/dictionary'
    import ga from 'wxapp-ga/ga'
    import {getLoginToken, refreshUserInformations} from './redux/models/user'
    import {getStorageAsync, setStorageAsync} from './utils'

    const GoogleAnalytics = ga.GoogleAnalytics
    const HitBuilders = ga.HitBuilders
    const CampaignParams = ga.CampaignParams
    export default class extends wepy.app {
        config = {
            pages: [
                /* 今日模板 */
                'pages/today-module/index',
                'pages/today-module/all-course',
                'pages/today-module/today-task',
                /* 课程模板 */
                'pages/course-module/course', // 课程首页
                'pages/course-module/assortment', // 系列详情
                'pages/course-module/course-details', // 课程详情
                'pages/course-module/course-learning', // 新微课学习
                'pages/course-module/course-learning-discuss', // 新微课学习想法详情
                'pages/course-module/course-exercises', // 微课课后练习题
                'pages/course-module/course-discuss', // 微课课后练习题→讨论区
                'pages/course-module/course-complete', // 微课完成
                'pages/course-module/course-level-instructions', // 微课完成-等级说明
                'pages/course-module/course-evaluation', // 微课评价
                'pages/course-module/course-pay', // 微课支付
                'pages/course-module/course-series', // 课程系列页
                'pages/course-module/course-review', // 微课回顾回顾页
                /* 发现模板 */
                'pages/FindList/index',
                'pages/SpecialCourse/index',
                /* 活动 */
                'pages/activity-module/new-appraisal-cover', // 新版测评封面
                'pages/activity-module/new-appraisal-subject', // 新版测评答题
                'pages/activity-module/new-appraisal-results', // 新版测评结果
                'pages/activity-module/custom-plan', // 专属学习计划
                'pages/activity-module/appraisal-start', // 测评开始页面
                'pages/activity-module/appraisal-questions', // 测评试题页面
                'pages/activity-module/appraisal-results', // 测评结果页面
                'pages/NoLogin/index',
                'pages/Mistake/index',
                /* 训练营 */
                'pages/training-camp-module/release-discuss', // 发布谈论
                'pages/training-camp-module/index', // 训练营-首页
                'pages/training-camp-module/all-training', // 查看全部训练营
                'pages/training-camp-module/introduce', // 训练营介绍
                'pages/training-camp-module/registration', // 训练营-报名
                'pages/training-camp-module/registration-info', // 训练营-报名信息
                'pages/training-camp-module/coursr-list', // 训练营-课程列表
                'pages/training-camp-module/training-detail', // 训练营-课程列表
                'pages/training-camp-module/release-message', // 训练营-发布消息
                'pages/training-camp-module/add-task', // 添加任务
                'pages/training-camp-module/invite-friends', // 邀请好友
                'pages/training-camp-module/skill-levels', // 技能水平
                'pages/training-camp-module/evaluation', // 评价
                'pages/training-camp-module/ranking-list', // 排行榜
                'pages/training-camp-module/transcript', // 成绩单
                'pages/training-camp-module/learning-result', // 学习成果
                'pages/training-camp-module/task-list', // 全部任务
                'pages/training-camp-module/my/main', // 我管理-管理
                'pages/training-camp-module/my/release-discuss', // 我管理-发布谈论
                'pages/training-camp-module/my/edit', // 我管理-编辑训练营
                'pages/training-camp-module/my/students-list', // 我管理-学员列表
                'pages/training-camp-module/my/students-management', // 我管理-学员管理
                'pages/training-camp-module/my/release-task', // 我管理-发布任务
                'pages/training-camp-module/my/share-link', // 我管理-分享链接
                'pages/training-camp-module/my/course-evaluation', // 我管理-课程评价
                'pages/training-camp-module/my/release-poll', // 我管理-发布投票
                'pages/training-camp-module/my/learning-goals', // 我管理-学习目标
                /* 个人中心 */
                'pages/user-module/mine',
                'pages/user-module/mine-edit',
                'pages/user-module/mine-edit-phone',
                'pages/user-module/mine-edit-email',
                'pages/user-module/mine-edit-interest',
                'pages/user-module/mine-edit-target',
                'pages/user-module/mine-edit-status',
                'pages/user-module/mine-feedback',
                'pages/user-module/skill-board',
                'pages/user-module/lesson-list',
                'pages/user-module/apply-for-test',
                'pages/user-module/score-detail',
                'pages/user-module/score-rules',
                'pages/user-module/mine-collect',
                /* 注册模块 */
                'pages/registered-module/interest-select',
                'pages/registered-module/recommend',
                'pages/registered-module/weclome',
                /* 其他模板 */
                'pages/other-module/work-template',
                'pages/other-module/job-skills',
                'pages/other-module/community',
            ],
            window: {
                navigationStyle: 'custom',
                backgroundTextStyle: "light",
                navigationBarBackgroundColor: "#294657",
                navigationBarTitleText: "即能",
                navigationBarTextStyle: "black",
            },
            networkTimeout: {
                request: 30000,
                downloadFile: 30000
            },
            workers: "workers"
        }

        globalData = {
            staffList: [],
            unionID: null,
            accessNumber: 0,
            newCourseDetailTempele: {},
            oldRounter: null,
            freeCourseRounter: null,
            allOpenIDHash(token) {
                let self = this
                if (self.staffList.length) {
                    return
                }

                fetch.allOpenIDHash({token: token || self.token}).then((respone) => {
                    self.staffList = respone
                })
            },
            getTracker() {
                let self = this
                let tracker = {}
                // 初始化GoogleAnalytics Tracker
                tracker = GoogleAnalytics.getInstance(self)
                    .setAppName('即能')
                    .setAppVersion('v1.0')
                    .newTracker(envConfig.gaTracker)
                tracker.setTrackerServer("https://wx-small.runwise.cn") // 使用自己的合法域名做跟踪数据转发
                return tracker
            },
            getShareHuilder(entr, code) {
                let self = this
                if (!entr || !code) {
                    return
                }

                let data = {
                    "utm_source" : code,
                    "utm_medium" : entr
                }
                console.log('渠道', data)
                let campaignUrl = CampaignParams.parseFromPageOptions(data).toUrl()
                let trackerInfo = self.getTracker()
                trackerInfo.setCampaignParamsOnNextHit(campaignUrl)
                trackerInfo.send(new HitBuilders.ScreenViewBuilder().build())
            },
            getHuilder(category, action, label) {
                let self = this
                if ('UA-127840357-1' === envConfig.gaTracker && -1 !== self.staffList.indexOf(self.unionID)){
                    return
                }
                var trackerInfo = self.getTracker()
                let builder = {}
                // console.log('ga----', category, action, label)
                if (action === 'click' || action === 'onUnload') {
                    builder = new HitBuilders.EventBuilder().setCategory(category).setAction(action).setLabel(label).build()
                } else {
                    trackerInfo.setScreenName(category)
                    builder = new HitBuilders.ScreenViewBuilder().build()
                }
                trackerInfo.send(builder)
            },
            getLoadHuilder(options) {
                let self = this
                if ('UA-127840357-1' === envConfig.gaTracker && -1 !== self.staffList.indexOf(self.unionID)){
                    return
                }
                let params = options || {}
                let rounter = getCurrentPages()
                let page = rounter[rounter.length - 1]
                let title = ROUTERS[page.route]

                self.getReportFlow(rounter)
                if (params.screenName || title) {
                    // Google Analytics 统计
                    var trackerInfo = self.getTracker()
                    let builder = {}
                    // console.log('ga----', params.screenName || title.screenName, params.pageTheme)
                    trackerInfo.setScreenName(params.screenName || title.screenName)
                    builder = new HitBuilders.ScreenViewBuilder().setCustomDimension(1, params.pageTheme || '-').build()
                    trackerInfo.send(builder)
                }
            },
            // 页面数据上报服务器
            getReportFlow(eventType='') {
                let self = this
                let rounter = getCurrentPages()
                let stateInfo = store.getState()
                let current = rounter[rounter.length - 1]
                let prev = rounter[rounter.length - 2]

                if ('defaultToken' === stateInfo.user.token) {
                    setTimeout(()=>{
                        self.getReportFlow(eventType)
                    }, 300)
                    return
                }

                let postData = {
                    token: stateInfo.user.token,
                    body: {
                        args: current.options,
                        previousArgs: prev && prev.options || '',
                        event: eventType,
                        msg: '',
                        source: !self.accessNumber ? stateInfo.entrance.scenceName : '',
                        previousUrl: prev && prev.route || current.route,
                        url: current.route
                    }
                }
console.log(123, postData)
                fetch.pageLogs(postData).then(respone => {
                    ++self.accessNumber
                })
            }
        }

        constructor() {
            super()
            setStore(store)
            this.use('requestfix')
            this.use('promisify')
        }

        onLaunch() {
            let self = this


            store.dispatch(getLoginToken()).then(respone => {
                let query = store.getState().entrance.query
                query && query.wxPushType && self.globalData.getReportFlow(query.wxPushType)
            }) // 默认登录

            // 强制更新
            const updateManager = wx.getUpdateManager()
            updateManager.onCheckForUpdate((res) => {
                // 请求完新版本信息的回调
                // console.log(res.hasUpdate)
            })

            updateManager.onUpdateReady(() => {
                wx.showModal({
                    title: '更新提示',
                    content: '新版本已经准备好，是否重启应用？',
                    success(res) {
                        if (res.confirm) {
                            updateManager.applyUpdate() // 新的版本已经下载好，调用 applyUpdate 应用新版本并重启
                        }
                    }
                })
            })

            updateManager.onUpdateFailed(() => {
                // 新的版本下载失败
                wx.showModal({
                    title: '更新提示',
                    content: '新版本下载失败',
                    showCancel: false
                })
            })
        }

        onShow() {
            // 设置缓存 第几次进入小程序
            getStorageAsync({key: 'pageLoadNum'}).then((respone) => {
                let num = respone + 1;
                setStorageAsync({
                    key: 'pageLoadNum',
                    value: num
                })
            }).catch(error => {
                setStorageAsync({
                    key: 'pageLoadNum',
                    value: 1
                })
            });
        }
    }
</script>
