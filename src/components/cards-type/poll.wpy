<style lang="less" scoped>

</style>

<template>
    <view class="module-poll-box" :class="{'is-phonex': isIphonex && !isLearning, 'is-learning': isLearning}">
        <view class="ui-content">
            <view class="ui-thumb" wx:if="{{cardsList[cardIndex].bigimage}}">
                <image mode="aspectFit" src="{{cardsList[cardIndex].bigimage}}"></image>
            </view>
            <view class="ui-title">{{cardsList[cardIndex].title}}</view>
            <view class="ui-description">{{cardsList[cardIndex].pollDesc}}</view>
            <view class="ui-type">【{{cardsList[cardIndex].cardStatus === 'single' || cardsList[cardIndex].pollType === 'single' ? '单选' : '多选'}}】</view>

            <view class="ui-answer-list">
                <repeat for="{{cardsList[cardIndex].select || cardsList[cardIndex].optionList}}" key="index" index="index" item="item">
                    <view class="ui-item"
                          hover-class="{{!cardsList[cardIndex].isAnswerOver && !cardsList[cardIndex].allowToNext ? 'ui-item-hover' : ''}}"
                          :class="{'is-selected': item.selected, 'is-selected-over': (cardsList[cardIndex].isAnswerOver || cardsList[cardIndex].isDone) && item.selected}"
                          data-item="{{item}}"
                          data-index="{{index}}"
                          @tap.stop="getSelected">
                        <view class="ui-prop"
                              style="width: {{ballotInfo[item.id] || item.prop}}%"></view>
                        <view class="cell-title cross-center">
                            <text>{{item.option}}</text>
                            <view class="cell-pointer" wx:if="{{!(cardsList[cardIndex].isDone)}}"></view>
                            <view class="cell-number" wx:if="{{cardsList[cardIndex].isDone}}">{{ballotInfo[item.id] || item.prop || 0}}%</view>
                        </view>
                    </view>
                </repeat>
            </view>
        </view>
    </view>
</template>

<script>
    import wepy from 'wepy'
    import {getStore, connect} from 'wepy-redux'
    import {parsePercentageForPoll} from '../../utils'
    import _ from 'underscore'

    const store = getStore()
    @connect({
        systemInfo(state) {
            return state.user
        }
    })
    export default class pollCard extends wepy.component {
        props = {
            cardIndex: {
                type: Number
            },
            cardsList: {
                type: Array,
                default: []
            },
            isLearning: {
                type: Number,
                default: 0
            }
        }

        data = {
            isIphonex: /iphone10|iphone x/i.test(wx.getSystemInfoSync().model),
            oldIndex: -1, // 记录之前的卡片索引
            selectedId: '', // 选中的顺序
            selectedInfo: {}, // 当前选中的那个选项
            ballotInfo: {}, // 投票比例
            ballotTotal: 0, // 全部票数
            resultId: -1, // 正确的结果id
            description: '' // 选中的答案的解释详情
        }

        onLoad() {
            let self = this
        }

        methods = {
            /**
             * 选中某个选项
             * @param event
             * @returns {boolean}
             */
            getSelected(event) {
                let self = this
                let {currentTarget: {dataset: {item, index}}} = event
                let cardItem = self.cardsList[self.cardIndex]

                if ((!item.id && !self.cardsList) || (cardItem.role && 'member' !== cardItem.role)) {
                    return
                }

                // poll只能投一次
                if (cardItem.isDone
                    || (cardItem.isAnswerOver && self.oldIndex === self.cardIndex)) {
                    return false
                }

                let selectList = cardItem.select || cardItem.optionList
                let selectedIds = []
                if ('single' === cardItem.cardStatus || 'single' === cardItem.pollType) {
                    _.each(selectList, (data) => {
                        data.selected = item.id === data.id ? true : false
                    })
                } else {
                    selectList[index].selected = !selectList[index].selected
                }

                 _.each(selectList, (data) => {
                    if (data.selected) {
                        return selectedIds.push(data.id)
                    }
                })

                let data = {
                    optionList: cardItem.optionList,
                    isFinish: selectedIds.length ? true : false,
                    id: cardItem.id || cardItem.pollID,
                    pollID: cardItem.id || cardItem.pollID,
                    selectedId: item.id,
                    selectedItem: {id: selectedIds.join(',')},
                    select: selectList,
                    fullImageBottomtText: selectedIds.length ? '我选好了' : '请投票'
                }

                self.$emit('on-interaction', data)
            }
        }

        events = {
            /**
             * 监听父级页面触发提交答案
             * @param data
             */
            'broadcast-poll': (data) => {
                let self = this
                let index = self.cardIndex
                let cardItem = data || self.cardsList[index]
                let optionList = data.select || cardItem.select || cardItem.optionList

                let item = _.find(optionList, {id: data.selectedId})
                self.resultId = item.id
                // 统计全部投票人数
                if (_.isUndefined(data.ballotTotal)) {
                    let ballotTotal = _.reduce(optionList, (memo, data) => {
                        data.add = data.selected ? 1 : 0
                        data.ballot = data.ballot >= 0 ? data.ballot : data.count
                        return memo + data.ballot + data.add
                    }, 0)
                    cardItem.ballotTotal = ballotTotal || 0

                    // 计算每个投票的比例
                    _.each(optionList, (data) => {
                        let add = data.id === item.id ? 1 : 0
                        self.ballotInfo[data.id] = data.prop = Math.floor((data.ballot + data.add) / ballotTotal * 1000) / 10
                    })
                } else {
                    // 计算每个投票的比例
                    cardItem.pollCount += 1
                    _.each(optionList, (data) => {
                        let add = data.selected ? 1 : 0
                        self.ballotInfo[data.id] = data.prop = Math.floor((data.ballot + add) / data.ballotTotal * 1000) / 10
                    })
                }

                cardItem.isDone = true
                cardItem.isAnswerOver = true
                self.oldIndex = _.clone(index)
                setTimeout(() => {
                    self.$emit('on-interaction', cardItem)
                }, 300)
                self.$apply()
            },
            /**
             * 监听父级，重置初始化数据
             * @param data
             */
            'broadcast-reset-status': (data) => {
                let self = this
                if (!self.cardsList) {
                    return
                }

                let index = data.index || self.cardIndex
                let cardItem = self.cardsList[index]

                self.oldIndex = -1 // 记录之前的卡片索引
                self.selectedId = 0 // 当前选中的那个选项
                self.resultId = -1 // 正确的结果id
                cardItem.isAnswerOver = false // 是否作答结束
                self.$apply()
            }
        }
    }
</script>
