<template>
  <view class="flex-space-between-column slider-article">

    <image class="slider-article__icon" mode="scaleToFill" src="http://wx-small.runwise.cn/image/imageID9e1ded07b974a3ba9e60a5c16a5c.svg"></image>

    <view class="slider-article__title-wrapper" :class="{ actived: !sliderDragging }">
      <text wx:for="{{ bundle.select }}" wx:if="{{ $mslider$item && $mslider$index===bundle.step }}" wx:for-index="$mslider$index" wx:for-item="$mslider$item" wx:key="$mslider$index" class="slider-article__title"> {{ $mslider$item.option }} </text>
    </view><!-- title__wrapper -->

    <view class="flex-space-between-column slider-article__desc">
      <text class="slider-article__indicator"> {{ bundle.subtitle }} {{ bundle.step + 1 }}/{{ bundle.select.length }} </text>
      <view class="slider-article__desc__wrapper" catchtouchstart="handleEmpty" catchtouchmove="handleEmpty">
        <text class="slider-article__tips {{ sliderDragging? 'dragging': 'unDragging' }}"> {{ tips || bundle.operatetip }} </text>
      </view><!-- slider-article__desc__wrapper -->
    </view><!-- slider-article__middle-block -->

    <view class="slider-article__botttom-wrapper" catchtouchstart="handleEmpty" catchtouchmove="handleEmpty" catchtouchend="handleEmpty">
      <!-- <view class="slider-article__botttom-wrapper__slider__fixed-tips" wx:if="{{ sliderDragging }}" style="left: {{ sliderValue }}%;">
        <text class="slider-article__botttom-wrapper__slider__fixed-tips__text"> tips </text>
        <view class="slider-article__botttom-wrapper__slider__fixed-arrow"></view>
      </view> -->
      <!-- slider-article__botttom-wrapper__slider__fixed-tips -->
      <view class="slider-article__botttom-wrapper__slider__fixed-tips-wrapper" :class="{ actived: !sliderDragging }">
        <slider
          class="slider-article__botttom-wrapper__slider"
          block-size="{{ blockSize }}"
          block-color="{{ blockColor }}"
          step="1"
          value="{{ sliderValue }}"
          bindchange="handleSliderChange"
          bindchanging="handleSliderChanging"
          catchtouchstart="handleEmpty"
          catchtouchmove="handleEmpty"
        />
      </view><!-- fixed-tips-wrapper -->
      <view class="flex-space-between-row slider-article__footer" :class="{ actived: !sliderDragging }">
        <text class="slider-article__footer__tip left"> {{ bundle.descriptionList[0] }} </text>
        <text class="slider-article__footer__tip right"> {{ bundle.descriptionList[bundle.descriptionList.length - 1] }} </text>
      </view><!-- slider-article__footer -->
    </view><!-- end slider-article__botttom-wrapper -->

  </view><!-- slider -->
</template>

<script>
  import wepy from 'wepy'
  import { sleep } from '../../utils'

  export default class Slider extends wepy.component {
    props = {
      offset: {
        type: Number
      },
      bundle: {
        type: Object
      },
      isActived: {
        type: Boolean
      }
    } // end props

    data = {
      sliderValue: 0,
      sliderDragging: false,
      flashLighting: false,
      blockSize: 25,
      blockColor: '#EBEBEB',
      tips: ''
    } // end data

    methods = {
      handleEmpty() {
        return false
      }, // end handleEmpty
      handleSliderChange(event) {
        let mDelay = this.$parent.cards[this.$parent.cardSyncCurrent]['step']===this.$parent.cards[this.$parent.cardSyncCurrent]['select'].length - 1? 0: 0.5
        this.blockSize = 25
        this.blockColor = '#EBEBEB'
        sleep(mDelay)
          .then(() => {
            this.$emit('sliderChanged', { componentOffset: this.$index, score: event.detail.value })
            this.$apply()
          })
        sleep(mDelay)
          .then(() => {
            this.sliderValue = 0 + Math.random() * 0.0001
            this.sliderDragging = false
            this.tips = ''
            this.$apply()
          })
        let mIfTimeToFeedback = this.$parent.cards[this.$parent.cardSyncCurrent]['step']===this.$parent.cards[this.$parent.cardSyncCurrent]['select'].length - 1
        // let mIfTimeToFeedback = 0 === this.$parent.cards[this.$parent.cardSyncCurrent]['step'] && this.$parent.cards[this.$parent.cardSyncCurrent]['select'].every(blob => 0!==blob.score)
        // console.log('this step', this.$parent.cards[this.$parent.cardSyncCurrent]['step'])
        // console.log('flag', mIfTimeToFeedback)
        if (!mIfTimeToFeedback) return false
        let mSum = this.$parent.cards[this.$parent.cardSyncCurrent]['select'].map(item =>item.score ).reduce((total, current) => {
          return total + current
        })
        let mPerfield = this.$parent.cards[this.$parent.cardSyncCurrent]['perField']
        let mOffset = Math.floor(mSum / mPerfield)
        let mFeedbackOffset = this.$parent.cards[this.$parent.cardSyncCurrent]['feedback']['sliderScore'][mOffset]
        let mFeedback = this.$parent.cards[this.$parent.cardSyncCurrent]['feedback']['sliderFeedback'][mFeedbackOffset]
        this.$emit('sliderResponse', {
          offset: this.$index,
          feedbackBundle: mFeedback
        })
        // console.log('total', mSum)
        // console.log('mOffset', mOffset)
        // console.log('feedback', mFeedback)
      }, // handleSliderChange
      handleSliderChanging({ target: { offsetLeft }, detail: { value } }) {
        this.sliderDragging = true
        this.blockSize = 37
        '#EBEBEB'===this.blockColor && (this.blockColor = '#FAA629')
        let mDescriptionList = this.$parent.cards[this.$parent.cardSyncCurrent]['descriptionList']
        let mPerfield = this.$parent.cards[this.$parent.cardSyncCurrent]['perField']
        let mOffset = Math.floor(value / mPerfield)
        mDescriptionList[mOffset]!==this.tips && sleep(0.01)
          .then(() => {
            this.tips = mDescriptionList[mOffset]
            this.$apply()
          })
      }, // handleSliderChanging
      handleSliderBegin() {}, // handleSliderBegin
      handleSliderMove(event) {
      } // handleSliderMove
    } // end methods

    flashLight(pDelay) {
      this.flashLighting = true
      sleep(pDelay)
        .then(() => {
          console.log('bitch, time to turn flashLighting to false')
          this.flashLight = false
          this.$apply()
        })
    } // end flashLight

  }
</script>

<style lang="less">
  .slider-article {
    width: 100%;
    height: 100%;
    box-sizing: border-box;
    padding: 0 72rpx;
    background-color: #FFF;
    align-items: center;
  }

  .slider-article__icon {
    width: 182rpx;
    height: 182rpx;
    margin-top: 64rpx;
  }

  .slider-article__title {
    height: 112rpx;
    margin-top: 60rpx;
    margin-bottom: 36rpx;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    -webkit-box-pack: center;
    -webkit-box-align: center;
    color: #000;
    font-size: 40rpx;
    font-family: PingFangSC-Semibold;
    line-height: 48rpx;
  }

  .slider-article__title-wrapper.actived {
    animation: fadeInDown .3s ease-in;
  }

  .slider-article__answers {
    width: 100%;
    height: 128rpx;
    text-align: center;
    box-sizing: content-box;
    /*border-top: 2rpx solid gold;*/
    /*border-bottom: 2rpx solid gold;*/
  }

  .slider-article__answers__text {
    max-height: 112rpx;
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    color: #47B99F;
    font-size: 40rpx;
    font-family: PingFangSC-Semibold;
    line-height: 56rpx;
  }

  .slider-article__desc {
    width: 100%;
    height: 336rpx;
    align-items: center;
  }

  .slider-article__indicator {
    margin-bottom: 198rpx;
    color: #778D9A;
    font-size: 28rpx;
    line-height: 28rpx;
    font-family: PingFangSC-Regular;
  }

  .slider-article__desc__wrapper {
    width: 100%;
    height: 70rpx;
    text-align: center;
  }

  .slider-article__tips {
    /*margin-bottom: 50rpx;*/
    color: #778D9A;
    font-size: 28rpx;
    line-height: 28rpx;
    font-family: PingFangSC-Regular;
  }

  .slider-article__tips.dragging {
    padding: 12rpx 22rpx 10rpx;
    background-color: rgba(250, 166, 41, .15);
    border-radius: 8rpx;
    color: #FF9900;
  }

  .slider-article__tips.unDragging {
    animation: pulse .3s ease-in;
  }

  /*.slider-article__tips.actived {
    animation: fadeIn .3s ease-in;
  }
*/
  .slider-article__botttom-wrapper {
    width: 702rpx;
    position: relative;
  }

  .slider-article__botttom-wrapper__slider__fixed-tips-wrapper {
    width: 558rpx;
    margin: 0 auto;
  }

  .slider-article__botttom-wrapper__slider__fixed-tips-wrapper.actived {
    animation: fadeInDown .3s ease-in .15s;
  }

  .slider-article__botttom-wrapper__slider__fixed-tips {
    display: inline-block;
    overflow: visible;
    background-color: rgba(250, 166, 41, .15);
    border-radius: 8rpx;
    position: absolute;
    left: 0;
    top: -105%;
    box-sizing: border-box;
    padding: 12rpx 22rpx 10rpx;
  }

  .slider-article__wrapper__slider__fixed-arrow {
    width: 0rpx;
    height: 0rpx;
    position :absolute;
    left: 45%;
    bottom: -20rpx;
    border-top: 20rpx solid rgba(250, 166, 41, .15);
    border-right: 10rpx solid transparent;
    border-left: 10rpx solid transparent;
  }

  .slider-article__wrapper__slider__fixed-tips__text {
    width: 100%;
    height: 100%;
    display: block;
    z-index: 999;
    color: #FF9900;
    font-size: 32rpx;
    font-family: PingFangSC-Medium;
    line-height: 44rpx;
  }

  .slider-article__wrapper__slider {
    width: 486rpx;
  }

  .slider-article__footer {
    width: 558rpx;
    margin: 0 auto 76rpx;
  }

  .slider-article__footer.actived {
    animation: fadeInDown .3s ease-in;
  }

  .slider-article__footer {
    color: #4A4A4A;
    font-size: 32rpx;
    font-family: PingFangSC-Regular;
    line-height: 44prx;
  }
</style>
