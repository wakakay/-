<style lang="less" scoped>
    .module-single-choice-box{
        padding-bottom:40rpx;
        .ui-content{padding:0 32rpx;}
    }
</style>

<template>
    <view class="module-single-choice-box">
        <view class="ui-content">
            <view class="ui-subtitle" wx:if="{{parentList[parentIndex][parentKey][cardIndex].subTitle}}"># {{parentList[parentIndex][parentKey][cardIndex].subTitle}}</view>
            <view class="ui-title">{{parentList[parentIndex][parentKey][cardIndex].title}}</view>


            <view class="ui-description" wx:if="{{parentList[parentIndex][parentKey][cardIndex].singleChoiceDescribe || parentList[parentIndex][parentKey][cardIndex].description}}">{{parentList[parentIndex][parentKey][cardIndex].singleChoiceDescribe || parentList[parentIndex][parentKey][cardIndex].description}}</view>
            <view class="ui-thumb" wx:if="{{parentList[parentIndex][parentKey][cardIndex].bigimage}}">
                <image mode="widthFix" src="{{parentList[parentIndex][parentKey][cardIndex].bigimage}}"></image>
            </view>

            <view class="ui-answer-list">
                <repeat for="{{parentList[parentIndex][parentKey][cardIndex].select}}" key="singleIndex" index="singleIndex" item="item">
                    <view class="ui-item main-justify cross-center"
                          :class="{'is-selected': item.selected || item.isSelected, 'is-success': parentList[parentIndex][parentKey][cardIndex].allowToNext && item.isanswer, 'is-error': parentList[parentIndex][parentKey][cardIndex].allowToNext && !item.isanswer && item.selected}"
                          hover-class="{{!isAnswerOver && !parentList[parentIndex][parentKey][cardIndex].allowToNext ? 'ui-item-hover' : ''}}"
                          data-parentlist="{{parentList}}"
                          data-parentkey="{{parentKey}}"
                          data-parentindex="{{parentIndex}}"
                          data-cardindex="{{cardIndex}}"
                          data-item="{{item}}"
                          data-index="{{singleIndex}}"
                          @tap.stop="getSelected">
                        <view class="cell-title" :class="{'is-full': isExercises}">
                            <text>{{labelDictionary[singleIndex+1]}}. </text>
                            <text>{{item.option}}</text>
                        </view>
                        <view class="cell-icon" wx:if="{{!isExercises}}"><text class="icon-correctly"></text></view>
                    </view>
                </repeat>
            </view>

            <view class="module-exercises-result" :class="{'is-show': isExercises && parentList[parentIndex][parentKey][cardIndex].answerDescription}">
                <view class="main-justify">
                    <view class="cell-exercises-title">题目解释</view>
                </view>
                <view class="ui-description">{{parentList[parentIndex][parentKey][cardIndex].answerDescription}}</view>
            </view>
        </view>
    </view>
</template>

<script>
    import wepy from 'wepy'
    import {getStore, connect} from 'wepy-redux'
    import _ from 'underscore'

    const store = getStore()
    @connect({
        systemInfo(state) {
            return state.user
        }
    })
    export default class singleChoiceCard extends wepy.component {
        props = {
            parentIndex: {
                type: Number
            },
            parentKey: {
                type: String
            },
            parentList: {
                type: Array,
                default: []
            },
            cardIndex: {
                type: Number
            },
            cardsList: {
                type: Array,
                default: []
            },
            isExercises: {
                type: Number,
                default: 0
            },
            commentsCount: {
                type: Number,
                default: 0
            }
        }

        data = {
            selectedId: 0, // 当前选中的那个选项
            labelDictionary: {1: 'A', 2: 'B', 3: 'C', 4: 'D', 5: 'E', 6: 'F'}
        }

        methods = {
            /**
             * 选中某个选项
             * @param event
             * @returns {boolean}
             */
            getSelected(event) {
                let self = this
                let {currentTarget: {dataset: {item, index, parentlist, parentindex, parentkey, cardindex}}} = event
                let cardData = !parentkey ? self.cardsList[self.cardIndex] : parentlist[parentindex][parentkey][cardindex]

                if (cardData.answerDescription || 'member' !== cardData.role) {
                    return false
                }
                _.each(cardData.select, (option) => {
                    option.selected = option.id == item.id ? true : false
                })
                self.selectedId = item.id
                self.$apply()

                let data = {
                    parentindex: parentindex,
                    parentkey: parentkey,
                    parentlist: parentlist,
                    cardindex: cardindex,
                    select: cardData.select,
                    isFinish: true,
                    isAnswerOver: false,
                    id: cardData.id,
                    selectedId: item.id,
                    selectedItem: item,
                    fullImageBottomtText: '我已选好',
                    json: item.sId,
                    answerStatus: item.isanswer ? 1 : 2, // 1回答正确, 2回答错误
                    answerTitle: item.feedback && item.feedback.title,
                    answerDescription: item.feedback && item.feedback.description
                }

                self.$emit('on-interaction', data)
            },
        }

        events = {
            /**
             * 监听父级页面触发提交答案
             * @param data
             */
            'broadcast-single-choive': (data) => {
                let self = this
                let cardData = !data.parentkey ? self.cardsList[self.cardIndex] : data.parentlist[data.parentindex][data.parentkey][data.cardindex]
                let item = !self.isExercises
                    ? _.find(cardData.select, {isanswer: true})
                    : _.find(cardData.select, {id: data.selectedId})

                self.$apply()
            },
            /**
             * 监听父级，重置初始化数据
             * @param data
             */
            'broadcast-reset-status': (data) => {
                let self = this
                self.selectedId = 0 // 当前选中的那个选项
                self.$apply()
            }
        }
    }
</script>
