<style lang="less" scoped>
    @import "../../assets/style/theme";
    .ui-header-button text{color:@color-blue}
    .ui-camp-lesson{
        .ui-lesson{
            padding: 20rpx 0;
            .ui-item{
                border-bottom:1rpx solid @border-gray;margin: 0 32rpx;
                .cell-course{font-size: 40rpx;font-weight: bold;height: 88rpx;line-height: 88rpx;margin-top: 23rpx;padding-left: 32rpx;}
                .ui-sence{
                    display: flex;height: 176rpx;align-items: center;justify-content: space-between;
                    image{width: 112rpx;height: 112rpx;border-radius: 28rpx;}
                    .ui-detail{
                        display: flex;flex: 1;margin-left: 24rpx;align-items:center;border-bottom:1rpx solid @border-gray; height:100%;
                        text{font-size:52rpx;color:@color-blue;}
                        .ui-name{
                            display: flex;flex: 1;flex-direction: column;
                            .cell-name{font-size: 32rpx;font-weight: bold}
                            .cell-targer{font-size: 26rpx;color:@color-gray;margin-top: 16rpx;}
                        }
                    }
                    &:last-of-type .ui-detail{border-bottom: none;}
                }
            }
            .cell-height{height: 200rpx;}
        }
    }
    @keyframes fadeInLeft{
        0%{left:100%}
        100%{left:0}
    }
    .ui-camp-add-lesson{
        position: fixed;top: 0;left: 0;bottom: 0;right: 0;z-index: @z-index-mask;width: 100%;height: 100%;background: @background-white;animation: fadeInLeft 200ms ease-out;
    }
</style>
<template>
    <view class="ui-camp-add-lesson"  hidden="{{ !isShow }}">
        <jn-header hiddenButton title="添加微课">
            <button slot="cursor-button" class="cell-back ui-header-button" @tap.stop="getClosePage">
                <text class="icon-back-close"></text>
            </button>
        </jn-header>
        <scroll-view  scroll-y class="ui-camp-search ui-camp-lesson" style="height: calc(100% - {{headerHeigth}}px)">
            <view class="ui-search">
                <view class="ui-input">
                    <text class="iconfont icon-search"></text>
                    <input value="{{searchName}}"
                        bindinput="getSearchName"
                        placeholder-class="cell-placeholder"
                        placeholder="请输入要查找的微课"/>
                </view>
                <view class="cell-search" @tap.stop="getStartSearch">搜索</view>
            </view>
            <view class="ui-lesson" scroll-y>
                <repeat for="{{dataList}}" key="index" index="index" item="item">
                    <view class="ui-item">
                        <view class="cell-course">{{item.courseName}}</view>
                        <repeat for="{{item.senceList}}" key="senceIndex" index="senceIndex" item="senceItem">
                            <view class="ui-sence" @tap.stop="getItem" data-index="{{index}}" data-sence-index="{{senceIndex}}">
                                <image src="{{senceItem.imageUrl}}"></image>
                                <view class="ui-detail">
                                    <view class="ui-name">
                                        <view class="cell-name">{{senceItem.senceName}}</view>
                                        <view class="cell-targer">{{senceItem.senceTarget}}</view>
                                    </view>
                                    <text class="{{senceItem.isSelected ? 'icon-correctly' : 'icon-selectable'}}"></text>
                                </view>
                            </view>
                        </repeat>
                    </view>
                </repeat>
                <view class="cell-height"></view>
            </view>
            <view class="ui-btn-box">
                <view class="cell-btn" @tap.stop="getSure">确定</view>
            </view>
        </scroll-view>
    </view>
</template>
<script>
    import wepy from "wepy"
    import {getStore, connect} from "wepy-redux"
    import header from '../../components/common/header'
    import {fetch} from "../../api";
    import _ from 'underscore'

    const store = getStore()
    @connect({
        token(state) {
            return 'userID574c448521c04ef59ad4542fbdd497fc-1547780027775-1a760516c9bff2c2914d70bed3c4a1e1'
            // return state.user.token;
        },
    })
    export default class addLesson extends wepy.component {

        components = {
            'jn-header': header,
        } 

        props = {
            isShowInsertLesson:{
                type: Boolean
            }
        }

        computed = {
            isShow () {
                let self = this;
                return self.isShowInsertLesson;
            }
        }

        data = {
            searchName:'',
            dataList:[],
            headerHeigth:68,
            seleteList:[],
        }; 
        methods = {
            getSearchName(e) {
                let self = this;
                self.searchName = e.detail.value;
                self.$apply();
            },
            getClosePage(){
                let self = this;
                self.$emit('onClickClose')
            },
            getStartSearch() {
                let self = this;
                let postData = {
                    token : self.token,
                    queryText : self.searchName
                }
                fetch.querySenceList(postData).then(res => {
                    self.dataList = res.dataList;
                    self.$apply();
                })
            },
            getItem(event) {
                let self = this;
                let {currentTarget: {dataset:{index,senceIndex}}} = event
                let dataList = self.dataList;
                dataList[index].senceList[senceIndex].isSelected = !dataList[index].senceList[senceIndex].isSelected
                self.dataList = dataList;
            },
            getSure(){
                let self = this;
                let dataList = self.dataList;
                _.each(dataList,(item,index)=>{
                    _.each(item.senceList,senceItem=>{
                        if(senceItem.isSelected) {
                            self.seleteList.push(senceItem)
                            self.$apply();
                        }
                    }) 
                })
                self.$emit('onClickSure',self.seleteList)
            }
        };

         events = {
            'header-info': (data) => {
                let self = this
                self.headerHeigth = data.headerHeigth
                self.$apply()
            }
        }
        
    }
</script>


