<style lang="less">

</style>

<template>
    <view class="module-author main-center cross-center {{isLoadOver && !isTokenSet && isShow ? 'is-flex-show' : ''}}"
          catchtouchmove="{{true}}">
        <view class="ui-author-box">
            <view class="ui-author-title"> {{ tips }}</view>
            <button class="ui-button" open-type="getUserInfo"
                    bindgetuserinfo="handleGetUserInfo">知道了
            </button>
        </view>
    </view>
</template>

<script>
    import wepy from 'wepy'
    import {sleep} from '../../utils'
    import {getStore, connect} from 'wepy-redux'
    import {CustomError} from '../../errors'
    import {login} from '../../redux/models/user'

    const store = getStore()
    @connect({
        poster(state) {
            return state.activity.poster
        },
        isTokenSet(state) {
            return state.user.token.startsWith('userID')
        }
    })
    export default class ActivityModal extends wepy.component {
        props = {
            tips: {
                type: String,
                default: '为了向你提供个性化学习服务，我们需要获取你的微信头像和昵称。'
            },
            isClickShow: {
                type: Boolean,
                default: false
            }
        }

        data = {
            isShow: true,
            isLoadOver: false
        }

        onLoad() {
            let self = this
            setTimeout(()=>{
               self.isLoadOver = true
               self.$apply()
            }, 300)
        }

        methods = {
            handleGetUserInfo(event) {
                let self = this
                self.authorizeRecurse(event.detail.errMsg)
            }
        }

        authorizeRecurse(errMsg) {
            let self = this
            if (self.isClickShow) {
                self.isShow = false
                self.$apply()
            }
            return new Promise((resolve, reject) => {
                if (errMsg === 'getUserInfo:fail auth deny') throw new CustomError('用户拒绝授权')
                if (errMsg && errMsg.includes('fail')) throw new CustomError('用户授权失败')

                resolve(errMsg)
            }).then(userInfo => { // 确定授权
                return store.dispatch(login())
            }).then(() => { // 授权成功
                self.__emit(1)
            }).catch(error => { // 拒接授权
                self.__emit()
            })
        }

        __emit(flag = 0) {
            let self = this
            self.$emit('authorizationSuccess', {status: flag})
        }
    }
</script>
