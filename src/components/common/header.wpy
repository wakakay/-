<style lang="less">
    .is-opacity{opacity:0;}
</style>

<template>
    <view class="module-header {{classNameSync}}" style="height:{{statusBarHeight+contentHeight}}px">
        <view class="ui-header-box" style="background:{{background}};color:{{textColor}};">
            <view class="ui-status-bar" style="height:{{statusBarHeight}}px"></view>

            <view class="ui-content" style="height:{{contentHeight}}px">
                <view class="ui-button">
                    <button class="cell-back" @tap.stop="getBack" wx:if="{{!isHiddenButton && !isSrcShare}}">
                        <text class="icon-{{buttonIcon}}"
                              style="color:{{buttonColor}}"></text>
                    </button>

                    <navigator wx:if="{{!isHiddenButton && isSrcShare}}"
                               class="cell-back main-center cross-center"
                               open-type="switchTab"
                               url="/pages/FindList/index">
                        <text class="icon-home"
                              style="color:{{buttonColor}}"></text>
                    </navigator>
                    <slot name="cursor-button"></slot>
                </view>

                <view class="ui-titile cross-center">
                    <slot wx:if="{{!titleName}}" name="content"></slot>
                    <text wx:if="{{titleName}}">{{titleName}}</text>
                </view>
            </view>
        </view>
    </view>
</template>

<script>
    /**
     * <jn-header></jn-header>
     * @module components/common/header
     * @desc 自定义header
     * @param {openType} [String] - 按钮跳转的方式{navigateTo、redirectTo、switchTab、reLaunch、navigateBack}----【navigateBack】
     * @param {fixed} [Boolean] - 是否固定在顶部----【true】
     * @param {title} [String] - 标题文字----【即能】
     * @param {gaTitle} [String] - 发送到ga的自定义纬度用的----【】
     * @param {hiddenButton} [String] - 不需要显示左侧按钮，写这个字段即可，不需要传值- ----【0显示】
     * @param {buttonIcon} [String] - 左侧的按钮的字体图标，会自动补全icon- ----【back】
     * @param {delta} [Number] - 返回路由的第几层- ----【1】
     * @param {className} [String] - 修改整个导航栏的样式，请在layout查找注释（header组件）并添加对应的classname，推荐使用----【白底黑字】
     * @param {title} [String] - 标题文字----【即能】
     * @param {buttonColor} [String] - 左侧的按钮的字体图标颜色，权限高于className，建议使用className- ----【】
     * @param {background} [String] - 头部背景颜色，权限高于className，建议使用className ----【】
     * @param {textColor} [String] - 头部字体颜色，权限高于className，建议使用className ----【】
     */
    import wepy from 'wepy'
    import {getStore, connect} from 'wepy-redux'
    import {ROUTERS} from '../../utils/router-dictionary'

    const store = getStore()
    @connect({
        systemInfo(state) {
            return state.user
        },
        // 全局场景值
        entrance(state) {
            return state.entrance
        }
    })
    export default class header extends wepy.component {
        props = {
            openType: {
                type: String,
                default: 'navigateBack'
            },
            fixed: {
                type: Boolean,
                default: true
            },
            title: {
                type: String,
                default: ''
            },
            gaTitle: {
                type: String,
                default: ''
            },
            className: {
                type: String
            },
            hiddenButton: {
                type: String,
                default: 0
            },
            buttonColor: {
                type: String
            },
            buttonIcon: {
                type: String,
                default: 'back'
            },
            delta: {
                type: Number,
                default: 1
            },
            background: {
                type: String
            },
            textColor: {
                type: String
            }
        }

        computed = {
            titleName() {
                let self = this
                return self.title
            },
            classNameSync() {
                let self = this
                return self.className
            },
            isHiddenButton() {
                let self = this
                return self.hiddenButton
            },
            routerDelta() {
                let self = this
                return self.delta
            }
        }

        data = {
            isIphonex: /iphone10|iphone x/i.test(wx.getSystemInfoSync().model),
            statusBarHeight: 20, // 状态栏的高度
            contentHeight: 44,
            isSrcShare: false,
            isFinishStatistics: false
        }

        onLoad() {
            let self = this
            self.isSrcShare = false

            let systemInfo = wx.getSystemInfoSync()
            let device = systemInfo.system

            self.statusBarHeight = systemInfo.statusBarHeight
            if (/ios/i.test(device)) {
                self.contentHeight = 44
            } else if (/android/i.test(device)) {
                self.contentHeight = 48
            }

            let rounter = getCurrentPages()
            // 如果==1，说明是分享出来的
            if (1 === rounter.length) {
                self.isSrcShare = true
            }
            self.$apply()

            setTimeout(()=>{
                self.isFinishStatistics = true
                self.__statisticsData()
            }, 1000)
            self.$emit('header-info', {headerHeigth: (self.statusBarHeight + self.contentHeight)})
        }

        /**
         * 数据统计埋点
         * @param delta 统计哪层路由的信息{1: 当前路由, 2: 返回上一层路由, 3及以上: 返回到第N层路由}
         */
        __statisticsData (delta) {
            let self = this

            let rounter = getCurrentPages()
            let page = rounter[rounter.length - (delta || 1)]
            let title = ROUTERS[page.route]


            if (title) {
                // 微信统计
                title.enName && wx.reportAnalytics(title.enName, {
                    username: self.systemInfo.userName,
                    channel: self.entrance.mappers[self.entrance.scenceID],
                    role: self.systemInfo.role
                })
            }
        }

        methods = {
            /**
             * navigateTo 保留当前页面，跳转到应用内的某个页面，使用wx.navigateBack可以返回到原页面。
             * redirectTo 关闭当前页面，跳转到应用内的某个页面。
             * switchTab 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面
             * reLaunch 关闭所有页面，打开到应用内的某个页面。
             * navigateBack 关闭当前页面，返回上一页面或多级页面。可通过 getCurrentPages() 获取当前的页面栈，决定需要返回几层。
             */
            getBack: function () {
                let self = this
                let delta = self.routerDelta + 0
                let rounter = getCurrentPages()
                if (rounter.length
                    && rounter[rounter.length-1] === 'pages/training-camp-module/coursr-list'
                    && rounter[rounter.length-2] === 'pages/training-camp-module/registration') {
                    delta = 2
                }

                self.isFinishStatistics && self.__statisticsData(delta+1)
                wx.navigateBack({delta: delta})
                /*switch (self.openType) {
                    case 'navigateTo':
                        break
                    case 'redirectTo':
                        break
                    case 'switchTab':
                        break
                    case 'navigateBack':

                        break
                    default:
                        wx.navigateBack({delta: delta})
                }*/
            },
            /**
             * 来源页面通知组件修改标题
             * @param title
             */
            setTitle(title) {
                let self = this
                self.titleName = title
            }
        }

        events = {}
    }
</script>
