<style lang="less" scoped>
    @import "../../assets/style/theme";
    .cell-canvas{width:375px;height:650px;position:fixed;left:150%;top:0;z-index:@z-index-normal;}
    .ui-share-box{
        box-sizing:border-box;width:100%;height:100%;padding:128rpx 32rpx 0;position:fixed;left:0;top:0;z-index:@z-index-mask;display:none;
        &.is-iphonex{
            padding:196rpx 32rpx 0;
            .ui-button-box{margin-top:44rpx;}
        }
        .ui-mask{width:100%;height:100%;background-color:@background-mask-normal;position:absolute;left:0;top:0;}
        .ui-thumb{
            width:686rpx;height:1070rpx;position:relative;z-index:@z-index-normal;border-radius:@border-radius-20;overflow:hidden;
            image{width:100%;height:100%;}
        }
        .ui-button-box{
            width:100%;height:100rpx;margin-top:10rpx;
            button{width:296rpx;margin:0 auto;font-size:34rpx;border-radius:@border-radius-20;}
            text{margin-right:10rpx;font-size:52rpx;background-color:@background-white;color:@color-blue;}
        }
    }

    .ui-toast-box{
        box-sizing:border-box;width:100%;height:100%;padding-top:50%;background-color:@background-mask-normal;position:fixed;left:0;top:0;z-index:@z-index-highest;display:none;
        .ui-toast-content{
            width:606rpx;height:582rpx;margin:0 auto;background-color:@color-white;border-radius:@border-radius-32;
            .ui-content{padding:70rpx 32rpx 0;}
            .cell-title{padding-bottom:54rpx;font-size:48rpx;color:@color-black;line-height:66rpx;text-align:center;}
            .cell-content{font-size:36rpx;color:@color-black;line-height:56rpx;}
            button{width:336rpx;height:100rpx;margin:0 auto 48rpx;background-color:@background-blue;font-size:34rpx;color:@color-white;border-radius:@border-radius-20;}
        }
    }
</style>

<template>
    <view class="ui-share-box" :class="{'is-iphonex': isIphonex, 'is-show': isDrawOver}">
        <view class="ui-mask" @tap.stop="getClose"></view>
        <view class="ui-thumb">
            <image mode="aspectFit" src="{{shareThumb}}"></image>
        </view>
        <view class="ui-button-box main-justify">
            <button class="main-center cross-center"
                    @tap.stop="getSaveImage">
                <text class="icon-down"></text>保存图片
            </button>
        </view>
    </view>
    <canvas class="cell-canvas" canvas-id="cardShare" style="width:{{cardShareInfo.width}}px;height:{{cardShareInfo.height}}px"></canvas>


    <view class="ui-toast-box" :class="{'is-show': isShowToast}">
        <view class="ui-toast-content dir-top main-justify">
            <view class="ui-content">
                <view class="cell-title">温馨提示</view>
                <view class="cell-content">你关闭了访问相册的权限，无法保存，请在设置中打开允许访问相册后再保存。</view>
            </view>
            <button open-type="openSetting"
                    bindopensetting='getSetting'>确定</button>
        </view>
    </view>

</template>

<script>
    import wepy from 'wepy'
    import {getStore, connect} from 'wepy-redux'
    import _ from 'underscore'

    const store = getStore()
    @connect({
        systemInfo(state) {
            return state.user
        }
    })
    export default class cardShareImage extends wepy.component {
        props = {

        }

        computed = {
        }

        data = {
            isIphonex: /iphone10|iphone x/i.test(wx.getSystemInfoSync().model),
            isDrawStart: true, // 是否可以开始绘画
            isDrawOver: false, // 是否会话结束
            cardCanvas: null, // 画布容器
            isShowToast: false,
            shareThumb: '', // 最后生成的分享图片
            shareImage: [], // 加载的图片信息
            // 画布上元素参考的的信息，有设计稿定死的
            cardShareInfo: {
                width: 343,
                height: 535,
                prop: 1
            }
        }

        onLoad() {

        }
        /**
         * 获取微信设置信息
         * @private
         */
        __wxSetting() {
            let self = this
            // 检测设置中是否允许保存到相册中去
            wx.getSetting({
                success(res) {
                    // 第一次，系统会自动调取授权
                    if (_.isUndefined(res.authSetting['scope.writePhotosAlbum'])) {
                        self.__saveImage()
                    } else if (!res.authSetting['scope.writePhotosAlbum']){ // 不授权
                        self.isShowToast = true
                    } else { // 授权
                        self.__saveImage()
                    }
                    self.$apply()
                }
            })
        }

        methods = {
            /**
             * 保存图片
             * @private
             */
            getSaveImage() {
                let self = this
                self.__wxSetting()
            },
            /**
             * 询问是否授权访问相册
             * @private
             */
            getSetting(event) {
                let self = this
                // 对用户的设置进行判断，如果没有授权，即使用户返回到保存页面，显示的也是“去授权”按钮；同意授权之后才显示保存按钮
                self.isShowToast = false
                if (event.detail.authSetting['scope.writePhotosAlbum']) {
                    self.__saveImage()
                }
            },
            /**
             * 关闭组件
             * @private
             */
            getClose() {
                let self = this
                self.isDrawOver = false
                self.$apply()
            }
        }

        events = {
            // 监听父组件的触发事件
            'card-share-images-list': (images, event) => {
                _.mapObject(images, (val, key) => {
                    if (-1 !== val.toString().indexOf('http://image.runwise.cn/')) {
                        images[key] = val.replace('http://image.runwise.cn/', 'https://wx-small.runwise.cn/')
                    }
                    if (-1 !== val.toString().indexOf('http://wx-small.runwise.cn')) {
                        images[key] = val.replace('http://wx-small.runwise.cn', 'https://wx-small.runwise.cn/')
                    }
                })

                let self = this
                self.cardShareInfo = {
                    width: 343,
                    height: 535,
                    prop: 1
                }
                let width = _.clone(self.cardShareInfo.width)
                let height = _.clone(self.cardShareInfo.height)
                self.cardCanvas = wx.createCanvasContext('cardShare')
                // 计算等比例缩放的比值
                if (self.systemInfo.pixelRatio > 2 && self.systemInfo.pixelRatio < 3) {
                    self.cardShareInfo.prop = self.systemInfo.pixelRatio / 3
                    self.cardShareInfo.width = Math.ceil(self.systemInfo.windowWidth * self.cardShareInfo.prop)
                } else if (self.systemInfo.pixelRatio > 1 && self.systemInfo.pixelRatio < 2) {
                    self.cardShareInfo.prop = self.systemInfo.pixelRatio / 2
                    self.cardShareInfo.width = Math.ceil(self.systemInfo.windowWidth * self.cardShareInfo.prop)
                } else {
                    self.cardShareInfo.prop = self.systemInfo.windowWidth / width
                    self.cardShareInfo.width = Math.ceil(self.cardShareInfo.width * self.cardShareInfo.prop)
                }

                self.cardShareInfo.height = Math.ceil(height * self.cardShareInfo.prop)
                // 如果还没绘画结束，则不继续绘画下一个
                if (self.isDrawStart) {
                    self.isDrawStart = false
                    self.isDrawOver = false
                    self.cardCanvas.clearRect(0, 0, self.cardShareInfo.width, self.cardShareInfo.height)
                    self.__initShareCard(images)
                }
            }
        }

        /**
         * 加载图片资源
         * @private image
         */
        __loadingImages(image) {
            return new Promise((resolve, reject) => {
                wx.getImageInfo({
                    src: image,
                    success(res) {
                        resolve(res)
                    },
                    fail() {
                        wx.hideLoading()
                        wx.showToast({
                            icon: 'none',
                            title: ' 生成图片失败 '
                        })
                    }
                })
            })
        }
        /**
         * 初始化，绘画所需要的元素及计算实际画布参考的大小及比例
         * @private
         */
        __initShareCard(images) {
            let self = this
            let senceThumb = self.__loadingImages(images.senceThumb) // 背景图片
            let cardImage = self.__loadingImages(images.cardImage) // 卡片
            let shareImage = self.__loadingImages(images.shareImage) // 二维码
            let logoImage = self.__loadingImages('https://wx-small.runwise.cn/image/imageID33995ff201c444ae1a7e1c7366fd.png')

            wx.showLoading({
                title: '努力生成中...'
            })
            Promise.all([senceThumb, cardImage, shareImage, logoImage]).then(res => {
                self.shareImage = res

                self.__drawStart() // 绘画开始
                self.cardCanvas.draw(false, () => {
                    wx.hideLoading()
                    self.__creatImage()
                })
            })
        }
        /**
         * 绘画开始，微课的图标
         * @private
         */
        __drawStart() {
            let self = this
            let shareImage = self.shareImage
            let cardShareInfo = self.cardShareInfo
            let w = Math.ceil(56 * cardShareInfo.prop)
            let h = Math.ceil(56 * cardShareInfo.prop)
            let x = Math.ceil(24 * cardShareInfo.prop)
            let y = Math.ceil(8 * cardShareInfo.prop)
            let r = Math.ceil(10 * cardShareInfo.prop)

            self.cardCanvas.save()
            self.cardCanvas.clearRect(x, y, w, h)
            self.__roundedRect(x, y, w, h, r)
            self.cardCanvas.clip() // 通过裁剪得到圆角矩形
            self.cardCanvas.drawImage(shareImage[0].path, x, y, w, h)
            self.cardCanvas.closePath()
            self.cardCanvas.stroke()
            self.cardCanvas.restore() // 恢复到之前的画板

            self.__drawSenceName()
        }
        /**
         * 绘制微课的icon
         * @param x
         * @param y
         * @param width
         * @param height
         * @param radius
         * @private
         */
        __roundedRect(x, y, width, height, radius) {
            let self = this
            self.cardCanvas.setStrokeStyle('#fff')
            self.cardCanvas.beginPath()
            self.cardCanvas.moveTo(x, y + radius)
            self.cardCanvas.lineTo(x, y + height - radius)
            self.cardCanvas.quadraticCurveTo(x, y + height, x + radius, y + height)
            self.cardCanvas.lineTo(x + width - radius, y + height)
            self.cardCanvas.quadraticCurveTo(x + width, y + height, x + width, y + height - radius)
            self.cardCanvas.lineTo(x + width, y + radius)
            self.cardCanvas.quadraticCurveTo(x + width, y, x + width - radius, y)
            self.cardCanvas.lineTo(x + radius, y)
            self.cardCanvas.quadraticCurveTo(x, y, x, y + radius)
            self.cardCanvas.closePath()
            self.cardCanvas.stroke()
        }
        /**
         * 绘制微课的名称
         * @private
         */
        __drawSenceName() {
            let self = this
            let cardShareInfo = self.cardShareInfo
            let fontsize1 = Math.ceil(16 * cardShareInfo.prop)
            let fontsize2 = Math.ceil(13 * cardShareInfo.prop)
            let x = Math.ceil(88 * cardShareInfo.prop)
            let y1 = Math.ceil(12 * cardShareInfo.prop) + fontsize1
            let y2 = Math.ceil(39 * cardShareInfo.prop) + fontsize2
            let text = self.systemInfo.name
            if (6 < text.length) {
                text.length = 6
            }
            text +=  ` 摘录于${new Date().format('yyyy-MM-dd')}`

            self.cardCanvas.save()
            self.cardCanvas.beginPath()
            self.cardCanvas.setFillStyle('black')
            self.cardCanvas.setFontSize(fontsize1)

            self.cardCanvas.fillText(self.$parent.senceName, x, y1)
            self.cardCanvas.closePath()
            self.cardCanvas.stroke()

            self.cardCanvas.beginPath()
            self.cardCanvas.setFillStyle('#8F8E94')
            self.cardCanvas.setFontSize(fontsize2)

            self.cardCanvas.fillText(text, x, y2)
            self.cardCanvas.closePath()
            self.cardCanvas.stroke()

            self.cardCanvas.restore()
            self.__drawRectangular()
        }
        /**
         * 绘制圆角矩形
         * @private
         */
        __drawRectangular() {
            let self = this
            let cardShareInfo = self.cardShareInfo

            self.cardCanvas.beginPath()
            self.cardCanvas.setStrokeStyle('#d1d1d6')
            self.cardCanvas.setFillStyle('#fff')
            let w = Math.ceil(295 * cardShareInfo.prop)
            let h = Math.ceil(394 * cardShareInfo.prop)
            let x = Math.ceil(24 * cardShareInfo.prop)
            let y = Math.ceil(72 * cardShareInfo.prop)
            let r = 10

            self.cardCanvas.moveTo(x + r, y)
            self.cardCanvas.arcTo(x + w, y, x + w, y + h, r)
            self.cardCanvas.arcTo(x + w, y + h, x, y + h, r)
            self.cardCanvas.arcTo(x, y + h, x, y, r)
            self.cardCanvas.arcTo(x, y, x + w, y, r)
            self.cardCanvas.fill()
            self.cardCanvas.closePath()
            self.cardCanvas.stroke()
            self.cardCanvas.restore()

            self.__drawCardImage(w, h, x, y)
        }
        /**
         * 绘画卡片图片
         * @param rectangularY 画矩形的y做标
         * @param rectangularH 画矩形的高度
         * @private
         */
        __drawCardImage(rectangularW, rectangularH, rectangularX, rectangularY) {
            let self = this
            let cardShareInfo = self.cardShareInfo
            let shareImage = self.shareImage
            // 等比例压缩图片的width跟height，自适应矩形
            let h = Math.ceil(375 * self.cardShareInfo.prop)
            let prop = h / shareImage[1].height
            let w = Math.ceil(shareImage[1].width * prop)

            // width是否大于巨型的宽度
            let wMax = Math.ceil(295 * self.cardShareInfo.prop)
            if (w > wMax) {
                w = wMax
                prop = w / shareImage[1].width
                h = Math.ceil(shareImage[1].height * prop)
            }

            // 使得卡片在这个矩形绝对居中
            let x = rectangularX + ((rectangularW - w) >> 1)
            let y = rectangularY + ((rectangularH - h) >> 1)
            self.cardCanvas.beginPath()
            self.cardCanvas.drawImage(shareImage[1].path, x, y, w, h)
            self.cardCanvas.closePath()
            self.cardCanvas.stroke()

            self.__drawText()
        }
        /**
         * 绘画标注文案
         * @private
         */
        __drawText(){
            let self = this
            let cardShareInfo = self.cardShareInfo
            let text1 = '来自即能小程序'
            let text2 = '长按识别，了解更多'
            let fontsize1 = Math.ceil(15 * cardShareInfo.prop)
            let fontsize2 = Math.ceil(12 * cardShareInfo.prop)
            let x = Math.ceil(28 * cardShareInfo.prop)
            let y1 = Math.ceil(492 * cardShareInfo.prop)
            let y2 = Math.ceil(516 * cardShareInfo.prop)


            self.cardCanvas.save()
            self.cardCanvas.beginPath()
            self.cardCanvas.setFillStyle('black')
            self.cardCanvas.setFontSize(fontsize1)

            self.cardCanvas.fillText(text1, x, y1)
            self.cardCanvas.closePath()
            self.cardCanvas.stroke()

            self.cardCanvas.beginPath()
            self.cardCanvas.setFillStyle('#8F8E94')
            self.cardCanvas.setFontSize(fontsize2)

            self.cardCanvas.fillText(text2, x, y2)
            self.cardCanvas.closePath()
            self.cardCanvas.stroke()

            self.cardCanvas.restore()

            self.__drawLogo()
        }
        /**
         * logo
         * @private
         */
        __drawLogo() {
            let self = this
            let cardShareInfo = self.cardShareInfo
            let shareImage = self.shareImage

            let w = Math.ceil(68 * cardShareInfo.prop)
            let h = Math.ceil(18 * cardShareInfo.prop)
            let x =  Math.ceil(184 * cardShareInfo.prop)
            let y =  Math.ceil(492 * cardShareInfo.prop)

            self.cardCanvas.save()
            self.cardCanvas.beginPath()

            self.cardCanvas.drawImage(shareImage[3].path, x, y, w, h)
            self.cardCanvas.closePath()
            self.cardCanvas.stroke()

            self.__drawQrcode()
        }
        /**
         * 小程序二维码
         * @private
         */
        __drawQrcode() {
            let self = this
            let cardShareInfo = self.cardShareInfo
            let shareImage = self.shareImage

            let w = Math.ceil(58 * cardShareInfo.prop)
            let h = Math.ceil(58 * cardShareInfo.prop)
            let x =  Math.ceil(260 * cardShareInfo.prop)
            let y =  Math.ceil(472 * cardShareInfo.prop)

            self.cardCanvas.save()
            self.cardCanvas.beginPath()

            self.cardCanvas.drawImage(shareImage[2].path, x, y, w, h)
            self.cardCanvas.closePath()
            self.cardCanvas.stroke()
        }
        /**
         * 生成图片
         * @private
         */
        __creatImage() {
            let self = this
            let cardShareInfo = self.cardShareInfo

            wx.canvasToTempFilePath({
                destWidth: cardShareInfo.width * 3,
                destHeight: cardShareInfo.height * 3,
                fileType: 'jpg',
                canvasId: 'cardShare',
                success(respone) {
                    self.isDrawStart = true
                    self.isDrawOver = true
                    self.shareThumb = respone.tempFilePath
                    self.$apply()
                }
            })
        }
        /**
         * 保存图片
         * @private
         */
        __saveImage() {
            let self = this
            wx.saveImageToPhotosAlbum({
                filePath: self.shareThumb,
                success(res) {
                    wx.showToast({
                        title: '已保存至系统相册',
                        showCancel: false,
                        duration: 2500
                    })
                    self.isDrawOver = false
                    self.$apply()
                    self.$emit('on-share-card')
                },
                fail(res) {
                    wx.showToast({
                        icon: 'none',
                        title: '保存失败',
                        showCancel: false,
                        duration: 2500
                    })
                }
            })
        }
    }
</script>
