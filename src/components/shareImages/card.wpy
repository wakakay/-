<style lang="less" scoped>
.draw-sharing{width:375px;height:650px;}
</style>

<template>
    <canvas class="draw-sharing" canvas-id="cardShare" style="width:{{cardShareInfo.width}}px;height:{{cardShareInfo.height}}px"></canvas>
</template>

<script>
    import wepy from 'wepy'
    import {getStore, connect} from 'wepy-redux'
    import _ from 'underscore'

    const store = getStore()
    @connect({
        systemInfo(state) {
            return state.user
        }
    })
    export default class cardShareImage extends wepy.component {
        props = {

        }

        computed = {
        }

        data = {
            isDrawOver: true, // 是否绘画结束
            cardCanvas: null, // 画布容器
            shareImage: [], // 加载的图片信息
            // 画布上元素参考的的信息，有设计稿定死的
            cardShareInfo: {
                width: 375,
                height: 650,
                prop: 1
            }
        }

        onLoad() {
            let self = this
        }

        methods = {}

        events = {
            // 监听父组件的触发事件
            'card-share-images-list': (images, event) => {
                _.mapObject(images, (val, key) => {
                    if (-1 !== val.toString().indexOf('http://image.runwise.cn/')) {
                        images[key] = val.replace('http://image.runwise.cn/', 'https://wx-small.runwise.cn/')
                    }
                    if (-1 !== val.toString().indexOf('http://wx-small.runwise.cn')) {
                        images[key] = val.replace('http://wx-small.runwise.cn', 'https://wx-small.runwise.cn/')
                    }
                })

                let self = this
                self.cardCanvas = wx.createCanvasContext('cardShare')
                self.cardShareInfo = {
                    width: 375,
                    height: 650,
                    prop: 1
                }
                let width = _.clone(self.cardShareInfo.width)
                let height = _.clone(self.cardShareInfo.height)

                if (self.systemInfo.pixelRatio > 2 && self.systemInfo.pixelRatio < 3) {
                    self.cardShareInfo.prop = self.systemInfo.pixelRatio / 3
                    self.cardShareInfo.width = Math.ceil(self.systemInfo.windowWidth * self.cardShareInfo.prop)
                } else if (self.systemInfo.pixelRatio > 1 && self.systemInfo.pixelRatio < 2) {
                    self.cardShareInfo.prop = self.systemInfo.pixelRatio / 2
                    self.cardShareInfo.width = Math.ceil(self.systemInfo.windowWidth * self.cardShareInfo.prop)
                } else {
                    self.cardShareInfo.prop = self.systemInfo.windowWidth / width
                    self.cardShareInfo.width = Math.ceil(self.cardShareInfo.width * self.cardShareInfo.prop)
                }

                self.cardShareInfo.height = Math.ceil(height * self.cardShareInfo.prop)
                // 如果还没绘画结束，则不继续绘画下一个
                if (self.isDrawOver) {
                    self.isDrawOver = false
                    self.cardCanvas.clearRect(0, 0, self.cardShareInfo.width, self.cardShareInfo.height)
                    self.__initShareCard(images)
                }
            }
        }
        /**
         * 初始化，绘画所需要的元素及计算实际画布参考的大小及比例
         * @private
         */
        __initShareCard(images) {
            let self = this
            // 背景图片
            let backgroundImage = new Promise(function (resolve, reject) {
                wx.getImageInfo({
                    src: images.footImage, success: function (res) {
                        resolve(res);
                    }
                })
            })
            // 卡片
            let contentImage = new Promise(function (resolve, reject) {
                wx.getImageInfo({
                    src: images.contentImage, success: function (res) {
                        resolve(res)
                    }
                })
            })
            // 二维码
            let shareImage = new Promise(function (resolve, reject) {
                wx.getImageInfo({
                    src: images.shareImage, success: function (res) {
                        resolve(res)
                    }
                })
            })

            wx.showLoading({
                title: '正在加载',
                mask: true
            })
            Promise.all(
                [backgroundImage, contentImage, shareImage]
            ).then(res => {
                self.shareImage = res

                self.__drawStart() // 绘画开始
                self.cardCanvas.draw(false, () => {
                    wx.hideLoading()
                    self.__saveImage()
                })
            })
        }
        /**
         * 绘画开始，先绘制背景图片
         * @private
         */
        __drawStart() {
            let self = this
            let shareImage = self.shareImage
            let cardShareInfo = self.cardShareInfo
            let w = Math.ceil(shareImage[0].width * cardShareInfo.prop)
            let h = Math.ceil(shareImage[0].height * cardShareInfo.prop)

            self.cardCanvas.drawImage(shareImage[0].path, 0, 0, cardShareInfo.width, cardShareInfo.height) // 背景图片
            self.__drawRectangular()
        }
        /**
         * 白色圆角矩形
         * @private
         */
        __drawRectangular() {
            let self = this
            let cardShareInfo = self.cardShareInfo

            self.cardCanvas.beginPath()
            self.cardCanvas.setStrokeStyle('#fff')
            self.cardCanvas.setFillStyle('#fff')
            let w = Math.ceil(self.cardShareInfo.width * 0.9333)
            let h = Math.ceil(500 * self.cardShareInfo.prop)
            let x = (self.cardShareInfo.width - w) >> 1
            let y = Math.ceil(30 * self.cardShareInfo.prop)
            let r = 6

            self.cardCanvas.moveTo(x + r, y)
            self.cardCanvas.arcTo(x + w, y, x + w, y + h, r)
            self.cardCanvas.arcTo(x + w, y + h, x, y + h, r)
            self.cardCanvas.arcTo(x, y + h, x, y, r)
            self.cardCanvas.arcTo(x, y, x + w, y, r)
            self.cardCanvas.fill()
            self.cardCanvas.closePath()
            self.cardCanvas.stroke()

            self.__drawCardImage(h)
        }
        /**
         * 教程卡片图片
         * @private
         */
        __drawCardImage(rectangularH) {
            let self = this
            let cardShareInfo = self.cardShareInfo
            let shareImage = self.shareImage
            // 等比例压缩图片的width跟height，自适应矩形
            let h = Math.ceil(400 * self.cardShareInfo.prop)
            let prop = h / shareImage[1].height
            let w = Math.ceil(shareImage[1].width * prop)
            // width是否大于巨型的宽度
            let wMax = Math.ceil(self.cardShareInfo.width * 0.9333)
            if ( w > wMax) {
                w = wMax
                prop =  w / shareImage[1].width
                h = Math.ceil(shareImage[1].height * prop)
            }
            // 使得卡片在这个矩形绝对居中
            let x =  (self.cardShareInfo.width - w) >> 1
            let y = Math.ceil(30 * self.cardShareInfo.prop) + ((rectangularH - h)>>1)

            self.cardCanvas.drawImage(shareImage[1].path, x, y, w, h)
            self.__drawText()
        }
        /**
         * 文案
         * @private
         */
        __drawText() {
            let self = this
            let cardShareInfo = self.cardShareInfo
            let fontsize = Math.ceil(12 * cardShareInfo.prop)
            let text1 = '长按小程序码'
            let text2 = '进入即能学习全课'
            let x = Math.ceil(106 * cardShareInfo.prop)
            let y1 = Math.ceil((30 + 500 + 58) * cardShareInfo.prop)
            let y2 = Math.ceil((30 + 500 + 76) * cardShareInfo.prop)

            self.cardCanvas.beginPath()
            self.cardCanvas.setFillStyle('#fff')
            self.cardCanvas.setFontSize(fontsize)
            self.cardCanvas.setTextAlign('left')

            self.cardCanvas.fillText(text1, x, y1)
            self.cardCanvas.fillText(text2, x, y2)
            self.cardCanvas.closePath()

            self.__drawQrcode()
        }
        /**
         * 小程序二维码
         * @private
         */
        __drawQrcode() {
            let self = this
            let cardShareInfo = self.cardShareInfo
            let shareImage = self.shareImage

            let w = Math.ceil(74 * cardShareInfo.prop)
            let h = Math.ceil(74 * cardShareInfo.prop)
            let x =  Math.ceil(22 * cardShareInfo.prop)
            let y =  Math.ceil((30 + 500 + 26) * cardShareInfo.prop)

            self.cardCanvas.save()
            self.cardCanvas.beginPath()
            self.cardCanvas.setStrokeStyle('#fff')
            self.cardCanvas.setLineWidth(2)

            self.cardCanvas.arc(x+(w>>1), y+(h>>1), (w>>1), 0, 2 * Math.PI)
            self.cardCanvas.clip()

            self.cardCanvas.drawImage(shareImage[2].path, x, y, w, h)
            self.cardCanvas.closePath()
            self.cardCanvas.stroke()
        }
        /**
         * 保存图片
         * @private
         */
        __saveImage() {
            let self = this
            let cardShareInfo = self.cardShareInfo

            wx.canvasToTempFilePath({
                destWidth: cardShareInfo.width * 3,
                destHeight: cardShareInfo.height * 3,
                fileType: 'jpg',
                canvasId: 'cardShare',
                success(res) {
                    self.__previewImage(res.tempFilePath) // 预览
                }
            })
        }
        /**
         * 预览图片
         * @private
         */
        __previewImage(tempFilePath) {
            let self = this
            self.isDrawOver = true
            wx.previewImage({
                current: tempFilePath, // 当前显示图片的http链接
                urls: [tempFilePath] // 需要预览的图片http链接列表
            })
            self.$emit('onCardDrawOver', {tempFilePath: tempFilePath})
        }
    }
</script>
