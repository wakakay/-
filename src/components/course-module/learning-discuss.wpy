<style lang="less" scoped>

</style>

<template>
    <view class="module-learning-discuss" wx:if="{{cardItem.type=='fullimage' || cardItem.type=='hotSpot'}}">
        <view class="ui-message main-center cross-center"
              style="top:{{headerHeigth}}px"
              data-type="1"
              @tap.stop="getShowStatus">
            <text class="icon-comment1"></text>{{cardItem.viewsCount ? cardItem.viewsCount+'个想法' : '记想法'}}
        </view>

        <view class="ui-mask"
              data-type="0"
              @tap.stop="getShowStatus"
              wx:if="{{isShow}}"></view>

        <scroll-view class="ui-discuss-list"
                     :class="{'is-iphonex': isIphonex}"
                     style="top:-{{keyboardHeight}}px"
                     scroll-y
                     scroll-top="{{scrollTop}}"
                     bindscrolltoupper="getScrolltoupper"
                     wx:if="{{isShow}}">
            <repeat for="{{discussList}}" key="index" index="index" item="item">
                <view class="ui-item flex {{item.isViewed ? 'ui-self' : 'ui-thire'}}">
                    <view class="ui-portrait flex-box-0"><image mode="scaleToFill" src="{{item.avatarUrl}}"></image></view>
                    <view class="ui-content">
                        <text class="icon-arrow"></text>
                        <view class="cell-content"><text selectable>{{item.content}}</text></view>
                        <view class="ui-button-list main-justify">
                            <view class="cell-time cross-center">{{item.createTime}}</view>
                            <view class="cell-button dir-left">
                                <button class="cross-center main-end"
                                        :class="{'active': item.isliked}"
                                        data-item="{{item}}"
                                        @tap.stop="getLike">
                                    <text class="icon-praise"></text>{{item.likeCount}}
                                </button>
                                <button class="cross-center main-end"
                                        :class="{'active': item.isReplied}"
                                        data-item="{{item}}"
                                        @tap.stop="getReply">
                                    <text class="icon-comment1"></text>{{item.replyCount}}
                                </button>
                            </view>
                        </view>
                    </view>
                </view>
            </repeat>
        </scroll-view>

        <view class="ui-textarea flex"
              style="bottom:{{keyboardHeight}}px"
              wx:if="{{isShow}}">
            <text class="icon-close flex-box-0" data-type="0" @tap.stop="getShowStatus"></text>
            <textarea class="cross-start"
                      maxlength="200"
                      placeholder="写下这一刻的想法……"
                      auto-height
                      adjust-position="{{false}}"
                      value="{{messageValue}}"
                      auto-focus="autoFocus"
                      bindfocus="getFocus"
                      bindblur="getBlur"
                      bindinput="getChange"
                      bindconfirm="getConfirm"></textarea>
        </view>
    </view>
</template>

<script>
    import wepy from 'wepy'
    import {getStore, connect} from 'wepy-redux'
    import {registered as fetch} from '../../api'
    import _ from 'underscore'

    const store = getStore()
    @connect({
        systemInfo(state) {
            return state.user
        }
    })
    export default class learningDiscuss extends wepy.component {
        props = {
            headerHeigth: {
                type: Number,
                default: 68
            },
            discussCount: {
                type: Array
            }
        }

        computed = {
            cardItem() {
                let self = this
                return self.discussCount[0]
            }
        }

        data = {
            isIphonex: /iphone10|iphone x/i.test(wx.getSystemInfoSync().model),
            isShow: false,
            scrollTop: 0,
            currentPage: 1,
            isMore: true, // 是否能加载更多
            autoFocus: false,
            keyboardHeight: 0,
            messageValue: '',
            discussList: []
        }

        onLoad() {
            let self = this
        }
        /**
         * 想法列表
         * @private
         */
        __discussList() {
            let self = this
            let postData = {
                token: self.systemInfo.token,
                courseID: self.$parent.courseID,
                senceID: self.$parent.senceID,
                cardID: self.$parent.cardCurrentInfo[0].id,
                page: self.currentPage,
                pageSize: 1000
            }
            fetch.senceViewList(postData).then(respone => {
                let discussList = []
                let length = respone.length-1
                discussList = _.map(respone, (item, index) => {
                    return respone[length - index]
                })

                self.discussList = discussList //_.union(discussList, self.discussList)
                self.$apply()

                /*if (discussList.length < 1000) {
                    self.isMore = false
                }*/

                let query = wx.createSelectorQuery()
                if (1 == self.currentPage && self.discussList.length) {
                    setTimeout(() => {
                        query.selectAll('.ui-item').boundingClientRect((response) => {
                            let size = response.length - 1
                            self.scrollTop = response[size].bottom
                            self.$apply()
                        }).exec()
                    }, 50)
                } else {
                    setTimeout(() => {
                        query.selectAll('.ui-item').boundingClientRect((response) => {
                            response.length = discussList.length - 1
                            let sum = _.reduce(response, (memo, item) => {return memo + item.height}, 0)
                            if (sum) {
                                self.scrollTop = sum
                            }
                            self.$apply()
                        }).exec()
                    }, 50)
                }
            }).catch(error => {

            })
        }
        /**
         * 发表想法
         * @private
         */
        __publishDiscuss() {
            let self = this
            let postData = {
                token: self.systemInfo.token,
                courseID: self.$parent.courseID,
                senceID: self.$parent.senceID,
                cardID: self.$parent.cardCurrentInfo[0].id,
                content: self.messageValue
            }
            fetch.publishSenceViews(postData).then(respone => {
                self.messageValue = ''
                self.discussList = []
                self.currentPage = 1
                self.$apply()
                self.$emit('on-learning-discuss') // 通知卡片的想法要+1
                self.__discussList()
            }).catch(error => {

            })
        }

        methods = {
            /**
             * 滚动到顶部加载更多想法
             */
            getScrolltoupper() {
                let self = this
                if (!self.isMore) {
                    return
                }
                self.currentPage += 1
                console.log(555, self.currentPage)
                self.__discussList()
            },
            /**
             * 是否展示想法模板
             * @param event
             */
            getShowStatus(event) {
                let self = this
                let {currentTarget: {dataset: {type}}} = event
                self.isShow = 1==type ? true : false
                if (self.isShow) {
                    self.__discussList()
                }
                self.$apply()
            },
            /**
             * testarea聚焦，定位键盘位置
             * @param event
             */
            getFocus(event) {
                let self = this
                let {detail: {value, height}} = event
                self.keyboardHeight = height - 30
                self.$apply()
            },
            /**
             * 失去焦点，还原高度
             * @param event
             */
            getBlur(event) {
                let self = this
                self.keyboardHeight = 0
                self.$apply()
            },
            /**
             * testarea文本内容改变
             * @param event
             */
            getChange(event) {
                let self = this
                let {detail: {value}} = event
                self.messageValue = value
            },
            /**
             * 提交想法
             * @param event
             */
            getConfirm(event) {
                let self = this
                self.__publishDiscuss()
            },
            /**
             * 点赞
             * @param event
             */
            getLike(event) {
                let self = this
                let {currentTarget: {dataset: {item}}} = event
                let postData = {
                    token: self.systemInfo.token,
                    viewID: item.viewID
                }

                let http = item.isliked ? fetch.dislikeSenceViews : fetch.likeSenceViews
                http(postData).then(respone => {
                    if (1 === respone.success) {
                        let data = _.find(self.discussList, {viewID: item.viewID})
                        if (item.isliked) {
                            data.isliked = 0
                            data.likeCount -= 1
                        } else {
                            data.isliked = 1
                            data.likeCount += 1
                        }
                        self.$apply()
                    }
                })
            },
            /**
             * 回复一个想法
             * @param event
             */
            getReply(event) {
                let self = this
                let {currentTarget: {dataset: {item}}} = event
                wx.navigateTo({url: `/pages/course-module/course-learning-discuss?viewID=${item.viewID}`})
            }
        }

        events = {
            'broadcast-learning-discuss': (data) => {
                let self = this
                self.__discussList()
            }
        }
    }
</script>
