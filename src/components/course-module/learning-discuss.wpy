<style lang="less" scoped>

</style>

<template>
    <view class="module-learning-discuss">
        <view class="ui-message main-center cross-center"
              :class="{'is-dark': cardItem.fullImageColorIsDark}"
              style="{{'top:'+headerHeigth+'px;'}}"
              data-type="1"
              @tap.stop="getShowStatus">
            <text class="icon-comment1"></text>{{cardItem.viewsCount ? cardItem.viewsCount+'个想法' : '记想法'}}
        </view>

        <view class="ui-mask"
              wx:if="{{isShow}}"
              data-type="0"
              @tap.stop="getShowStatus"></view>

        <view class="ui-list-box"
              :class="{'is-iphonex': isIphonex}"
              style="{{'top:'+ (-keyboardHeight)+'px;'}}"
              @tap.stop="getShowStatus" wx:if="{{isShow}}">
            <scroll-view class="ui-discuss-list"
                         scroll-y="{{discussList.length>5 ? true : false}}"
                         data-type="0"
                         bindscrolltolower="getScrolltolower">
                <repeat for="{{discussList}}" key="index" index="index" item="item">
                    <view class="ui-item flex {{item.isViewed ? 'ui-self' : 'ui-thire'}}">
                        <view class="ui-portrait flex-box-0"><image mode="scaleToFill" src="{{item.avatarUrl}}"></image></view>
                        <view class="ui-content">
                            <text class="icon-arrow"></text>
                            <view class="cell-content"
                                  data-item="{{item}}"
                                  @tap.stop="getDicussDetail"><text selectable>{{item.content}}</text></view>
                            <view class="ui-button-list main-justify">
                                <view class="cell-time cross-center">{{item.createTime}}</view>
                                <view class="cell-button dir-left">
                                    <button class="cross-center main-end"
                                            :class="{'active': item.isliked}"
                                            data-item="{{item}}"
                                            @tap.stop="getLike">
                                        <text class="icon-praise"></text>{{item.likeCount}}
                                    </button>
                                    <button class="cross-center main-end"
                                            :class="{'active': item.isReplied}"
                                            data-item="{{item}}"
                                            @tap.stop="getReply">
                                        <text class="icon-comment1"></text>{{item.replyCount}}
                                    </button>
                                </view>
                            </view>
                        </view>
                    </view>
                </repeat>
            </scroll-view>
        </view>
        <view class="ui-textarea flex cross-end"
              style="bottom:{{keyboardHeight}}px;"
              wx:if="{{isShow}}">
            <text class="icon-close"
                  data-type="0"
                  @tap.stop="getShowStatus"></text>
            <view class="cell-textarea">
                <textarea auto-height
                          maxlength="200"
                          placeholder="{{!viewID ? '写下这一刻的想法……' : '回复'+viewName+'：'}}"
                          adjust-position="{{false}}"
                          show-confirm-bar="{{false}}"
                          value="{{messageValue}}"
                          selection-start="{{messageValue.length}}"
                          selection-end="{{messageValue.length}}"
                          focus="{{isFocus}}"
                          bindfocus="getFocus"
                          bindblur="getBlur"
                          bindinput="getChange"
                          bindconfirm="getConfirm"></textarea>
            </view>
            <button @tap.stop="getConfirm" wx:if="{{messageValue.length}}"><text class="icon-send"></text></button>
        </view>
    </view>
</template>

<script>
    import wepy from 'wepy'
    import {getStore, connect} from 'wepy-redux'
    import {fetch} from '../../api'
    import {trim} from '../../utils'
    import _ from 'underscore'

    const store = getStore()
    @connect({
        systemInfo(state) {
            return state.user
        }
    })
    export default class learningDiscuss extends wepy.component {
        props = {
            headerHeigth: {
                type: Number,
                default: 68
            }
        }

        data = {
            isIphonex: /iphone10|iphone x/i.test(wx.getSystemInfoSync().model),
            isShow: false,
            currentPage: 1,
            isMore: true, // 是否能加载更多
            isFocus: false,
            viewID: null,
            viewName: '',
            keyboardHeight: 0,
            messageValue: '',
            discussList: [],
            cardItem: []
        }

        onLoad() {
            let self = this
            wepy.$instance.globalData.getLoadHuilder() // ga统计
        }
        /**
         * 想法列表
         * @private
         */
        __discussList() {
            let self = this
            if (!self.isMore) {
                return
            }

            let postData = {
                token: self.systemInfo.token,
                courseID: self.$parent.courseID,
                senceID: self.$parent.senceID,
                cardID: self.cardItem.id,
                page: self.currentPage,
                pageSize: 10
            }

            fetch.senceViewList(postData).then(respone => {
                if (respone.length < 10) {
                    self.isMore = false
                }

                self.discussList = _.union(self.discussList, respone)
                if (!self.discussList.length) {
                    self.isFocus = true
                }
                self.$apply()
            }).catch(error => {
            })
        }
        /**
         * 发表想法
         * @private
         */
        __publishDiscuss() {
            let self = this
            let postData = {
                token: self.systemInfo.token,
                courseID: self.$parent.courseID,
                senceID: self.$parent.senceID,
                cardID: self.$parent.cardCurrentInfo[0].id,
                content: self.messageValue
            }
            fetch.publishSenceViews(postData).then(respone => {
                self.messageValue = ''
                self.currentPage = 1
                self.isMore = true
                self.discussList = []
                self.$apply()
                self.__discussList()
                self.$emit('on-learning-discuss') // 通知卡片的想法要+1
            }).catch(error => {
                wx.showToast({
                    icon: 'none',
                    title: ' 网络错误 '
                })
                self.isMore = true
                self.$apply()
            })
        }
        /**
         * 回复想法
         * @private
         */
        __replyDiscuss() {
            let self = this
            let postData = {
                token: self.systemInfo.token,
                viewID: self.viewID,
                content: self.messageValue
            }
            fetch.replySenceViews(postData).then(respone => {
                self.messageValue = ''
                self.viewID = null
                self.currentPage = 1
                self.viewName = ''
                self.isMore = true
                self.discussList = []
                self.$apply()
                self.__discussList()
            }).catch(error => {
                wx.showToast({
                    icon: 'none',
                    title: ' 网络错误 '
                })
                self.isMore = true
                self.$apply()
            })
        }
        methods = {
            /**
             * 滚动到顶部加载更多想法
             */
            getScrolltolower() {
                let self = this
                if (!self.isMore) {
                    return
                }
                self.currentPage += 1
                self.__discussList()
            },
            /**
             * 是否展示想法模板
             * @param event
             */
            getShowStatus(event) {
                let self = this
                let {currentTarget: {dataset: {type}}} = event
                if (self.keyboardHeight) {
                    return
                }
                self.isShow = 1==type ? true : false
                if (self.isShow) {
                    self.__discussList()
                }
                self.$apply()
            },
            /**
             * testarea聚焦，定位键盘位置
             * @param event
             */
            getFocus(event) {
                let self = this
                let {detail: {value, height}} = event
                self.keyboardHeight = height - 15
                self.$apply()
            },
            /**
             * 失去焦点，还原高度
             * @param event
             */
            getBlur(event) {
                let self = this
                self.keyboardHeight = 0
                self.isFocus = false
                self.viewID = null
                self.$apply()
            },
            /**
             * testarea文本内容改变
             * @param event
             */
            getChange(event) {
                let self = this
                let {detail: {value}} = event
                self.messageValue = value
            },
            /**
             * 提交想法
             * @param event
             */
            getConfirm(event) {
                let self = this
                let messageVlaue = trim(self.messageValue)
                if ('' === messageVlaue) {
                    wx.showToast({
                        icon: 'none',
                        title: ' 写下这一刻的想法…… '
                    })
                    self.messageValue = ''
                    self.$apply()
                    return
                }
                !self.viewID ? self.__publishDiscuss() : self.__replyDiscuss()
            },
            /**
             * 点赞
             * @param event
             */
            getLike(event) {
                let self = this
                let {currentTarget: {dataset: {item}}} = event
                let postData = {
                    token: self.systemInfo.token,
                    viewID: item.viewID
                }

                let http = item.isliked ? fetch.dislikeSenceViews : fetch.likeSenceViews
                http(postData).then(respone => {
                    if (1 === respone.success) {
                        let data = _.find(self.discussList, {viewID: item.viewID})
                        if (item.isliked) {
                            data.isliked = 0
                            data.likeCount -= 1
                        } else {
                            data.isliked = 1
                            data.likeCount += 1
                        }
                        self.$apply()
                    }
                })
            },
            /**
             * 去发现想法详情
             * @param event
             */
            getDicussDetail(event) {
                let self = this
                let {currentTarget: {dataset: {item}}} = event
                wx.navigateTo({url: `/pages/course-module/course-learning-discuss?viewID=${item.viewID}`})
            },
            /**
             * 回复一个想法
             * @param event
             */
            getReply(event) {
                let self = this
                let {currentTarget: {dataset: {item}}} = event
                self.viewID = item.viewID
                self.viewName = item.nickName
                self.isFocus = true
                self.$apply()
            }
        }

        events = {
            'broadcast-learning-discuss-reset': (data) => {
                let self = this
                self.cardItem = data
                self.isMore = true
                self.discussList = []
                self.$apply()
            },
            'broadcast-learning-discuss': (data) => {
                let self = this
                self.__discussList()
            }
        }
    }
</script>
